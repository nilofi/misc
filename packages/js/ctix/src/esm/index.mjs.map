{
  "version": 3,
  "sources": ["../../src/comments/getCommentKind.ts", "../../src/comments/getCommentsWithParent.ts", "../../src/comments/getCommentWorkspace.ts", "../../src/comments/getCommentWorkspaces.ts", "../../src/comments/getJsDocComment.ts", "../../src/comments/getJsDocTag.ts", "../../src/comments/getInlineCommented.ts", "../../src/compilers/getExportAssignmentMap.ts", "../../src/comments/getNodeComments.ts", "../../src/comments/getSourceFileComments.ts", "../../src/comments/getInlineCommentedFiles.ts", "../../src/configs/const-enum/CE_GENERATION_STYLE.ts", "../../src/templates/modules/getGenerationStyle.ts", "../../src/comments/getInlineStyle.ts", "../../src/comments/getOutputExcludedFiles.ts", "../../src/compilers/getFunctionName.ts", "../../src/compilers/getExportedKind.ts", "../../src/comments/const-enum/CE_INLINE_COMMENT_KEYWORD.ts", "../../src/compilers/getStatementAlias.ts", "../../src/modules/path/extensions.ts", "../../src/modules/path/getExtname.ts", "../../src/modules/path/filenamify.ts", "../../src/modules/path/modules/posixRelative.ts", "../../src/modules/path/getRelativeDepth.ts", "../../src/compilers/getSummaryStatement.ts", "../../src/modules/path/modules/posixResolve.ts", "../../src/compilers/getExportStatement.ts", "../../src/compilers/getFileScope.ts", "../../src/compilers/getTypeScriptConfig.ts", "../../src/compilers/getTypeScriptProject.ts", "../../src/compilers/isDeclaration.ts", "../../src/compilers/isDeclarationFile.ts", "../../src/compilers/StatementTable.ts", "../../src/compilers/SymbolTable.ts", "../../src/configs/const-enum/CE_CTIX_COMMAND.ts", "../../src/configs/castConfig.ts", "../../src/configs/getConfigObject.ts", "../../src/configs/getConfigValue.ts", "../../src/configs/modules/getSourceFileEol.ts", "../../src/modules/path/getDepth.ts", "../../src/configs/getExtendOptions.ts", "../../src/configs/const-enum/CE_CTIX_DEFAULT_VALUE.ts", "../../src/configs/modules/getCommand.ts", "../../src/configs/modules/getConfigFilePath.ts", "../../src/configs/modules/json/getString.ts", "../../src/configs/modules/json/readJson5.ts", "../../src/configs/modules/json/readJsonc.ts", "../../src/configs/modules/json/readYml.ts", "../../src/configs/parseConfig.ts", "../../src/configs/modules/readConfigFromFile.ts", "../../src/configs/modules/readConfigFromPackageJson.ts", "../../src/configs/modules/readConfigFromTsconfigJson.ts", "../../src/modules/values/getCheckedValue.ts", "../../src/configs/loadConfig.ts", "../../src/cli/builders/setCommandInitOptions.ts", "../../src/cli/builders/setCommandRemoveOptions.ts", "../../src/cli/builders/setModeBundleOptions.ts", "../../src/cli/builders/setModeCreateOptions.ts", "../../src/configs/const-enum/CE_CTIX_BUILD_MODE.ts", "../../src/configs/const-enum/CE_EXTENSION_PROCESSING.ts", "../../src/cli/builders/setModeGenerateOptions.ts", "../../src/cli/builders/setProjectOptions.ts", "../../src/cli/ux/ProgressBar.ts", "../../src/cli/ux/Reasoner.ts", "../../src/cli/ux/Spinner.ts", "../../src/configs/transforms/getOutputValue.ts", "../../src/configs/transforms/transformBundleMode.ts", "../../src/configs/transforms/transformCreateMode.ts", "../../src/configs/transforms/transformModuleMode.ts", "../../src/modules/file/getTsExcludeFiles.ts", "../../src/modules/file/getTsIncludeFiles.ts", "../../src/configs/transforms/createBuildOptions.ts", "../../src/modules/file/ProjectContainer.ts", "../../src/modules/file/checkOutputFile.ts", "../../src/modules/path/modules/posixJoin.ts", "../../src/modules/file/getGlobFiles.ts", "../../src/modules/scope/defaultExclude.ts", "../../src/modules/scope/ExcludeContainer.ts", "../../src/modules/scope/IncludeContainer.ts", "../../src/modules/writes/getBanner.ts", "../../src/modules/writes/prettifing.ts", "../../src/modules/writes/indexWrites.ts", "../../src/templates/const-enum/CE_TEMPLATE_NAME.ts", "../../src/modules/path/addExt.ts", "../../src/templates/templates/declarationFileTemplate.ts", "../../src/templates/templates/defaultAliasNamedDestructiveDefaultTemplate.ts", "../../src/templates/templates/defaultAliasNamedStarDefaultTemplate.ts", "../../src/templates/templates/defaultNonAliasNamedDestructiveDefaultTemplate.ts", "../../src/templates/templates/defaultStarNamedDestructiveDefaultTemplate.ts", "../../src/templates/templates/defaultStarNamedStarDefaultTemplate.ts", "../../src/templates/templates/indexFileDefaultTemplate.ts", "../../src/templates/templates/moduleIndexFileDefaultTemplate.ts", "../../src/templates/templates/nestedOptionDefaultTemplate.ts", "../../src/templates/templates/optionDefaultTemplate.ts", "../../src/templates/modules/TemplateContainer.ts", "../../src/modules/path/addCurrentDirPrefix.ts", "../../src/modules/path/getImportStatementRemoveExtname.ts", "../../src/modules/path/getImportStatementReplaceJs.ts", "../../src/modules/path/getImportStatementExtname.ts", "../../src/templates/modules/getInlineDeclarationRenderData.ts", "../../src/templates/modules/getRenderData.ts", "../../src/templates/const-enum/CE_AUTO_RENDER_CASE.ts", "../../src/templates/modules/getAutoRenderCase.ts", "../../src/templates/modules/getSelectStyle.ts", "../../src/modules/commands/bundling.ts", "../../src/modules/path/getAllParentDir.ts", "../../src/modules/file/walk.ts", "../../src/modules/path/getParentDir.ts", "../../src/templates/modules/createRenderData.ts", "../../src/modules/commands/creating.ts", "../../src/templates/modules/getModuleRenderData.ts", "../../src/modules/commands/moduling.ts", "../../src/modules/commands/building.ts", "../../src/cli/commands/buildCommand.ts", "../../src/configs/modules/getTsconfigComparer.ts", "../../src/cli/questions/askInitOptions.ts", "../../src/configs/modules/getDefaultInitAnswer.ts", "../../src/modules/values/isConfigComment.ts", "../../src/modules/commands/initializing.ts", "../../src/cli/commands/initCommand.ts", "../../src/configs/transforms/createRemoveOptions.ts", "../../src/cli/modules/getRatioNumber.ts", "../../src/cli/questions/askRemoveFiles.ts", "../../src/modules/file/getRemoveFileGlobPattern.ts", "../../src/modules/file/unlinks.ts", "../../src/modules/commands/removing.ts", "../../src/cli/commands/removeCommand.ts", "../../src/cli/questions/askInitOverwrite.ts", "../../src/comments/const-enum/CE_INLINE_EXCLUDE_KIND.ts", "../../src/modules/file/endsEol.ts", "../../src/configs/modules/json/readJsonConfig.ts", "../../src/configs/modules/json/safeJsonc.ts"],
  "sourcesContent": ["import * as tsm from 'ts-morph';\n\nexport function getCommentKind(kind: tsm.SyntaxKind) {\n  switch (kind) {\n    case tsm.SyntaxKind.MultiLineCommentTrivia:\n      return tsm.SyntaxKind.MultiLineCommentTrivia;\n    default:\n      return tsm.SyntaxKind.SingleLineCommentTrivia;\n  }\n}\n", "import * as tsm from 'ts-morph';\n\nexport function getCommentsWithParent(node: tsm.Node<tsm.ts.Node>): tsm.CommentRange[] {\n  if (node.getKind() === tsm.SyntaxKind.VariableDeclaration) {\n    const parent = node.getParent();\n    const grandParent = parent?.getParent();\n\n    const parentComments =\n      parent?.getKind() === tsm.SyntaxKind.VariableDeclarationList\n        ? parent.getLeadingCommentRanges()\n        : [];\n\n    const grandParentComments =\n      grandParent?.getKind() === tsm.SyntaxKind.VariableStatement\n        ? grandParent.getLeadingCommentRanges()\n        : [];\n\n    return [...grandParentComments, ...parentComments, ...node.getLeadingCommentRanges()];\n  }\n\n  return node.getLeadingCommentRanges();\n}\n", "export function getCommentWorkspace(workspace: string): string {\n  const workspaceTrimed = workspace.trim();\n\n  if (workspaceTrimed.endsWith(',')) {\n    return workspaceTrimed.substring(0, workspaceTrimed.length - 1);\n  }\n\n  return workspaceTrimed;\n}\n", "import { getCommentWorkspace } from '#/comments/getCommentWorkspace';\n\nexport function getCommentWorkspaces(rawWorkspace?: string): string[] {\n  if (rawWorkspace == null || rawWorkspace === '') {\n    return [];\n  }\n\n  return rawWorkspace\n    .split(/\\s/)\n    .filter((workspace) => workspace != null && workspace !== '')\n    .map((workspace) => getCommentWorkspace(workspace));\n}\n", "import * as tsm from 'ts-morph';\n\nexport function getJsDocComment(\n  kind: tsm.SyntaxKind.MultiLineCommentTrivia | tsm.SyntaxKind.SingleLineCommentTrivia,\n  comment: string,\n) {\n  if (kind === tsm.SyntaxKind.SingleLineCommentTrivia) {\n    return `/**${comment.trim().replace(/(\\/\\/)(\\/|)/, '')} */`;\n  }\n\n  if (!/^\\/\\*\\*/.test(comment.trim())) {\n    return comment.trim().replace(/\\/\\*/, '/**');\n  }\n\n  return comment;\n}\n", "export function getJsDocTag(tag: string) {\n  if (tag.trim().startsWith('@')) {\n    return tag.trim().substring(1);\n  }\n\n  return tag.trim();\n}\n", "import { getCommentWorkspaces } from '#/comments/getCommentWorkspaces';\nimport { getJsDocComment } from '#/comments/getJsDocComment';\nimport { getJsDocTag } from '#/comments/getJsDocTag';\nimport type { IInlineCommentInfo } from '#/comments/interfaces/IInlineCommentInfo';\nimport type { IStatementComments } from '#/comments/interfaces/IStatementComments';\nimport { parse } from 'comment-parser';\n\nexport function getInlineCommented(params: {\n  comment: IStatementComments;\n  options: { keyword: string };\n}): IInlineCommentInfo | undefined {\n  const content = params.comment.range;\n  const refined = getJsDocComment(params.comment.kind, content);\n  const blocks = parse(refined);\n  const block = blocks.at(0);\n\n  if (block == null) {\n    return undefined;\n  }\n\n  const tag = block.tags.find((element) => element.tag === getJsDocTag(params.options.keyword));\n\n  if (tag?.tag === params.options.keyword || tag?.tag === params.options.keyword.substring(1)) {\n    return {\n      commentCode: content,\n      filePath: params.comment.filePath,\n      pos: params.comment.pos,\n      tag: tag.tag,\n      workspaces: getCommentWorkspaces([tag.name ?? '', tag.description ?? ''].join(' ')),\n    } satisfies IInlineCommentInfo;\n  }\n\n  return undefined;\n}\n", "import * as tsm from 'ts-morph';\n\nexport function getExportAssignmentMap(sourceFile: tsm.SourceFile) {\n  const exportAssignments = sourceFile.getExportAssignments();\n\n  const exportAssignmentMap = exportAssignments\n    .map((exportAssignment) => {\n      const exportAssignmentName = exportAssignment\n        .getChildren()\n        .map((node) => {\n          const name =\n            node.getKind() === tsm.SyntaxKind.Identifier ? node.getText().trim() : undefined;\n          return name;\n        })\n        .filter((name) => name != null)\n        .at(0);\n\n      return { node: exportAssignment, name: exportAssignmentName ?? '__default' };\n    })\n    .reduce<Map<string, tsm.ExportAssignment>>((aggregation, node) => {\n      aggregation.set(node.name, node.node);\n      return aggregation;\n    }, new Map<string, tsm.ExportAssignment>());\n\n  return exportAssignmentMap;\n}\n", "import { getCommentKind } from '#/comments/getCommentKind';\nimport { getCommentsWithParent } from '#/comments/getCommentsWithParent';\nimport type { IStatementComments } from '#/comments/interfaces/IStatementComments';\nimport { getExportAssignmentMap } from '#/compilers/getExportAssignmentMap';\nimport type * as tsm from 'ts-morph';\n\nexport function getNodeComments(\n  node: tsm.Node<tsm.ts.Node>,\n  identifier?: string,\n): IStatementComments[] {\n  const start = node.getStart();\n  const lineAndPos = node.getSourceFile().getLineAndColumnAtPos(start);\n  const exportAssignmentMap = getExportAssignmentMap(node.getSourceFile());\n  const exportAssignment = identifier != null ? exportAssignmentMap.get(identifier) : undefined;\n\n  const leadingComment =\n    exportAssignment != null\n      ? getCommentsWithParent(exportAssignment)\n      : getCommentsWithParent(node);\n\n  if (leadingComment != null && leadingComment.length > 0) {\n    return leadingComment.map((range) => {\n      const kind: IStatementComments['kind'] = getCommentKind(range.getKind());\n\n      return {\n        pos: { start, ...lineAndPos },\n        range: range.getText(),\n        filePath: node.getSourceFile().getFilePath().toString(),\n        kind,\n      };\n    });\n  }\n\n  return [];\n}\n", "import { getNodeComments } from '#/comments/getNodeComments';\nimport type { ISourceFileComments } from '#/comments/interfaces/ISourceFileComments';\nimport type * as tsm from 'ts-morph';\n\nexport function getSourceFileComments(sourceFile: tsm.SourceFile): ISourceFileComments {\n  const comments: ISourceFileComments['comments'] = [];\n\n  sourceFile.forEachChild((node) => {\n    comments.push(...getNodeComments(node));\n  });\n\n  return {\n    filePath: sourceFile.getFilePath().toString(),\n    comments,\n  };\n}\n", "import type { CE_INLINE_COMMENT_KEYWORD } from '#/comments/const-enum/CE_INLINE_COMMENT_KEYWORD';\nimport { getInlineCommented } from '#/comments/getInlineCommented';\nimport { getSourceFileComments } from '#/comments/getSourceFileComments';\nimport type { IExcludeFile } from '#/comments/interfaces/IExcludeFile';\nimport type { IInlineCommentInfo } from '#/comments/interfaces/IInlineCommentInfo';\nimport type * as tsm from 'ts-morph';\nimport type { SetRequired } from 'type-fest';\n\nexport function getInlineCommentedFiles(params: {\n  project: tsm.Project;\n  filePaths: string[];\n  keyword: CE_INLINE_COMMENT_KEYWORD;\n}) {\n  const excluded = params.filePaths\n    .map((filePath) => params.project.getSourceFile(filePath))\n    .filter((sourceFile): sourceFile is tsm.SourceFile => sourceFile != null)\n    .map((sourceFile): IExcludeFile => {\n      const sourceFileComment = getSourceFileComments(sourceFile);\n\n      const fileExcludeComment = sourceFileComment.comments\n        .map((comment) => getInlineCommented({ comment, options: { keyword: params.keyword } }))\n        .filter((comment): comment is IInlineCommentInfo => comment != null);\n\n      const firstExcludeComment = fileExcludeComment.at(0);\n\n      return {\n        filePath: sourceFile.getFilePath().toString(),\n        fileExcludeComment,\n        firstExcludeComment,\n        excluded: firstExcludeComment != null,\n      } satisfies IExcludeFile;\n    })\n    .filter(\n      (exclude): exclude is SetRequired<IExcludeFile, 'firstExcludeComment'> =>\n        exclude.firstExcludeComment != null && exclude.excluded,\n    )\n    .map((exclude) => {\n      return {\n        ...exclude.firstExcludeComment,\n        filePath: exclude.filePath,\n      };\n    });\n\n  return excluded;\n}\n", "/**\n * `index.ts` \uD30C\uC77C\uC744 \uC0DD\uC131\uD560 \uB54C \uC5B4\uB5A4 \uBC29\uC2DD\uC73C\uB85C \uC0DD\uC131\uD560 \uC9C0\uB97C \uACB0\uC815\uD569\uB2C8\uB2E4\n *\n * When generating the `index.ts` file, decide how you want to generate it\n *\n * auto\n * default alias, named star\n * default alias, named destructive\n * default non alias, named destructive\n * default star, named star\n * default star, named destructive\n */\nexport const CE_GENERATION_STYLE = {\n  AUTO: 'auto',\n  DEFAULT_ALIAS_NAMED_STAR: 'default-alias-named-star',\n  DEFAULT_ALIAS_NAMED_DESTRUCTIVE: 'default-alias-named-destructive',\n  DEFAULT_NON_ALIAS_NAMED_DESTRUCTIVE: 'default-non-alias-named-destructive',\n  DEFAULT_STAR_NAMED_STAR: 'default-star-named-star',\n  DEFAULT_STAR_NAMED_DESTRUCTIVE: 'default-star-named-destructive',\n} as const;\n\nexport type CE_GENERATION_STYLE = (typeof CE_GENERATION_STYLE)[keyof typeof CE_GENERATION_STYLE];\n", "import { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\n\nexport function getGenerationStyle(name: string): CE_GENERATION_STYLE {\n  switch (name) {\n    case CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_DESTRUCTIVE:\n      return CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_DESTRUCTIVE;\n    case CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_STAR:\n      return CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_STAR;\n    case CE_GENERATION_STYLE.DEFAULT_NON_ALIAS_NAMED_DESTRUCTIVE:\n      return CE_GENERATION_STYLE.DEFAULT_NON_ALIAS_NAMED_DESTRUCTIVE;\n    case CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_DESTRUCTIVE:\n      return CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_DESTRUCTIVE;\n    case CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR:\n      return CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR;\n    default:\n      return CE_GENERATION_STYLE.AUTO;\n  }\n}\n", "import { getCommentWorkspaces } from '#/comments/getCommentWorkspaces';\nimport { getJsDocComment } from '#/comments/getJsDocComment';\nimport { getJsDocTag } from '#/comments/getJsDocTag';\nimport type { IInlineGenerationStyleInfo } from '#/comments/interfaces/IInlineGenerationStyleInfo';\nimport type { IStatementComments } from '#/comments/interfaces/IStatementComments';\nimport { getGenerationStyle } from '#/templates/modules/getGenerationStyle';\nimport { parse } from 'comment-parser';\n\nexport function getInlineStyle(params: {\n  comment: IStatementComments;\n  options: { keyword: string };\n}): IInlineGenerationStyleInfo | undefined {\n  const content = params.comment.range;\n  const refined = getJsDocComment(params.comment.kind, content);\n  const blocks = parse(refined);\n  const block = blocks.at(0);\n\n  if (block == null) {\n    return undefined;\n  }\n\n  const tag = block.tags.find((element) => element.tag === getJsDocTag(params.options.keyword));\n\n  if (tag?.tag === params.options.keyword || tag?.tag === params.options.keyword.substring(1)) {\n    return {\n      commentCode: params.comment.range,\n      filePath: params.comment.filePath,\n      style: getGenerationStyle(tag.name),\n      pos: params.comment.pos,\n      workspaces: getCommentWorkspaces(tag.description ?? ''),\n    } satisfies IInlineGenerationStyleInfo;\n  }\n\n  return undefined;\n}\n", "import type { IExtendOptions } from '#/configs/interfaces/IExtendOptions';\nimport { settify } from 'my-easy-fp';\nimport { getDirname } from 'my-node-fp';\nimport pathe from 'pathe';\nimport type * as tsm from 'ts-morph';\n\nexport async function getOutputExcludedFiles(params: {\n  project: tsm.Project;\n  extendOptions: Pick<IExtendOptions, 'eol'>;\n  exportFilename: string;\n  filePaths: string[];\n}) {\n  const outputDirPaths = await Promise.all(\n    params.filePaths\n      .map((filePath) => params.project.getSourceFile(filePath))\n      .filter((sourceFile): sourceFile is tsm.SourceFile => sourceFile != null)\n      .map(async (sourceFile) => {\n        const filePath = sourceFile.getFilePath().toString();\n        const dirPath = await getDirname(filePath);\n        return dirPath;\n      }),\n  );\n\n  const outputFiles = settify(outputDirPaths).map((dirPath) =>\n    pathe.join(dirPath, params.exportFilename),\n  );\n\n  return outputFiles;\n}\n", "import * as tsm from 'ts-morph';\n\nexport function getFunctionName(kind: tsm.SyntaxKind, name?: string): string | undefined {\n  if (kind === tsm.SyntaxKind.ArrowFunction) {\n    if (name !== '__function' && name != null) {\n      return name;\n    }\n\n    return undefined;\n  }\n\n  if (kind === tsm.SyntaxKind.FunctionDeclaration) {\n    if (name != null) {\n      return name;\n    }\n\n    return undefined;\n  }\n\n  return undefined;\n}\n", "import { getFunctionName } from '#/compilers/getFunctionName';\nimport * as tsm from 'ts-morph';\nimport { match } from 'ts-pattern';\n\nexport function getExportedKind(node: tsm.ExportedDeclarations): {\n  name?: string;\n  isPureType: boolean;\n  kind: tsm.SyntaxKind;\n} {\n  const kind = node.getKind();\n\n  return (\n    match<\n      tsm.SyntaxKind,\n      {\n        name?: string;\n        isPureType: boolean;\n        kind: tsm.SyntaxKind;\n      }\n    >(kind)\n      .with(tsm.SyntaxKind.ClassDeclaration, () => {\n        return {\n          name: node.asKindOrThrow(tsm.SyntaxKind.ClassDeclaration).getNameOrThrow().toString(),\n          kind: tsm.SyntaxKind.ClassDeclaration,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.VariableDeclaration, () => {\n        const variableDeclarationNode = node.asKindOrThrow(tsm.SyntaxKind.VariableDeclaration);\n\n        return {\n          name: variableDeclarationNode.getName(),\n          kind: tsm.SyntaxKind.VariableDeclaration,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.ArrowFunction, () => {\n        const arrowFunctionNode = node.asKindOrThrow(tsm.SyntaxKind.ArrowFunction);\n        const name = arrowFunctionNode.getSymbolOrThrow().getEscapedName();\n\n        return {\n          name: getFunctionName(tsm.SyntaxKind.ArrowFunction, name),\n          kind: tsm.SyntaxKind.ArrowFunction,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.FunctionDeclaration, () => {\n        const functionDeclarationNode = node.asKindOrThrow(tsm.SyntaxKind.FunctionDeclaration);\n        const name = functionDeclarationNode.getName();\n\n        return {\n          name: getFunctionName(tsm.SyntaxKind.FunctionDeclaration, name),\n          kind: tsm.SyntaxKind.FunctionDeclaration,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.InterfaceDeclaration, () => {\n        const interfaceDeclarationNode = node.asKindOrThrow(tsm.SyntaxKind.InterfaceDeclaration);\n        const name = interfaceDeclarationNode.getName();\n\n        return {\n          name,\n          kind: tsm.SyntaxKind.InterfaceDeclaration,\n          isPureType: true,\n        };\n      })\n      .with(tsm.SyntaxKind.TypeAliasDeclaration, () => {\n        const typeAliasDeclarationNode = node.asKindOrThrow(tsm.SyntaxKind.TypeAliasDeclaration);\n        const name = typeAliasDeclarationNode.getName();\n\n        return {\n          name,\n          kind: tsm.SyntaxKind.TypeAliasDeclaration,\n          isPureType: true,\n        };\n      })\n      .with(tsm.SyntaxKind.EnumDeclaration, () => {\n        const enumDeclarationNode = node.asKindOrThrow(tsm.SyntaxKind.EnumDeclaration);\n        const name = enumDeclarationNode.getName();\n\n        return {\n          name,\n          kind: tsm.SyntaxKind.EnumDeclaration,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.ArrayLiteralExpression, () => {\n        /*\n         * ArrayLiteralExpression\n         * ArrayLiteralExpression have to export default(non-named default export)\n         * eg.\n         *\n         * ```ts\n         * export default [ Button, Text, Accordion ];\n         * ```\n         */\n        return {\n          name: undefined,\n          kind: tsm.SyntaxKind.ArrayLiteralExpression,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.ObjectLiteralExpression, () => {\n        /*\n         * ObjectLiteralExpression\n         * eg.\n         *\n         * ```ts\n         * export { Button, Text, Accordion };\n         * ```\n         */\n        return {\n          name: undefined,\n          kind: tsm.SyntaxKind.ObjectLiteralExpression,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.BindingElement, () => {\n        /*\n         * BindingElement\n         * eg.\n         *\n         * ```ts\n         * export const { Button, Text, Accordion } = CoreModule;\n         * ```\n         */\n        const bindingElementNode = node.asKindOrThrow(tsm.SyntaxKind.BindingElement);\n        const name = bindingElementNode.getName();\n\n        return {\n          name,\n          kind: tsm.SyntaxKind.BindingElement,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.CallExpression, () => {\n        /*\n         * CallExpression\n         * CallExpression don't have name and only working non-named-export\n         * eg.\n         *\n         * ```ts\n         * export default withTheme()(ReactComponent);\n         * ```\n         */\n        return {\n          name: undefined,\n          kind: tsm.SyntaxKind.CallExpression,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.NewExpression, () => {\n        /*\n         * NewExpression\n         * NewExpression don't have name and only working non-named-export\n         * eg.\n         *\n         * ```ts\n         * export default new MyComponent();\n         * ```\n         */\n        return {\n          name: undefined,\n          kind: tsm.SyntaxKind.NewExpression,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.ModuleDeclaration, () => {\n        const moduleDeclarationNode = node.asKindOrThrow(tsm.SyntaxKind.ModuleDeclaration);\n        const name = moduleDeclarationNode.getName();\n\n        return {\n          name,\n          kind: tsm.SyntaxKind.ModuleDeclaration,\n          isPureType: false,\n        };\n      })\n      .with(tsm.SyntaxKind.SourceFile, () => {\n        /*\n         * SourceFile(like Vue.js components)\n         * eg.\n         *\n         * ```ts\n         * /// <reference path=\"../types/vue.d.ts\" />\n         * import Foo from './Foo.vue';\n         * export { Foo };\n         * ```\n         */\n        return {\n          name: undefined,\n          kind: tsm.SyntaxKind.SourceFile,\n          isPureType: false,\n        };\n      })\n      /*\n       * Identifier(like React.js components)\n       * eg.\n       *\n       * ```ts\n       * /// <reference path=\"../types/react.d.ts\" />\n       * import 'react';\n       * export const ReactComponent = () => {\n       *   return <div><h1>Hello</h1></div>\n       * };\n       *\n       * ReactComponent.getInitialProps = () => {}; // this statement passed by Identifier\n       * ```\n       */\n      .otherwise(() => {\n        throw new Error(`Cannot support type: (${node.getKind()}) ${node.getText()}`);\n      })\n  );\n}\n", "export const CE_INLINE_COMMENT_KEYWORD = {\n  FILE_EXCLUDE_KEYWORD: '@ctix-exclude',\n  FILE_DECLARATION_KEYWORD: '@ctix-declaration',\n  NEXT_STATEMENT_EXCLUDE_KEYWORD: '@ctix-exclude-next',\n  FILE_GENERATION_STYLE_KEYWORD: '@ctix-generation-style',\n} as const;\n\nexport type CE_INLINE_COMMENT_KEYWORD =\n  (typeof CE_INLINE_COMMENT_KEYWORD)[keyof typeof CE_INLINE_COMMENT_KEYWORD];\n", "import type { getExportedKind } from '#/compilers/getExportedKind';\n\nexport function getStatementAlias({\n  alias,\n  isDefault,\n  filenamified,\n  kind,\n}: {\n  alias?: string;\n  filenamified: string;\n  isDefault?: boolean;\n  kind: ReturnType<typeof getExportedKind>;\n}): string {\n  if (isDefault && kind.name != null) {\n    return kind.name;\n  }\n\n  if (alias != null) {\n    return alias;\n  }\n\n  return filenamified;\n}\n", "/*\n// valid ext\n// '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\n\n  from checker.js\n  src/compiler/checker.ts:\n  src/compiler/checker.ts:            [\".mts\", \".mjs\"],\n\n  tests/baselines/reference/declarationEmitInvalidReferenceAllowJs.errors.txt:\n  tests/cases/compiler/declarationEmitInvalidReferenceAllowJs.ts(1,22): \n  error TS6231: Could not resolve the path 'tests/cases/compiler/invalid' with the extensions: \n  '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\n */\n\nexport const extensions = ['.ts', '.tsx', '.d.ts', '.cts', '.d.cts', '.mts', '.d.mts'];\n", "import { extensions } from '#/modules/path/extensions';\nimport path from 'node:path';\n\nexport function getExtname(filePath: string): string {\n  if (extensions.every((extension) => filePath.endsWith(extension) === false)) {\n    return path.extname(filePath);\n  }\n\n  if (filePath.endsWith('.d.ts')) {\n    return '.d.ts';\n  }\n\n  if (filePath.endsWith('.d.cts')) {\n    return '.d.cts';\n  }\n\n  if (filePath.endsWith('.d.mts')) {\n    return '.d.mts';\n  }\n\n  return path.extname(filePath);\n}\n", "import { getExtname } from '#/modules/path/getExtname';\nimport { camelCase } from 'change-case';\nimport doFilenamify from 'filenamify';\nimport path from 'node:path';\n\nexport function filenamify(filename: string): string {\n  const basename = path.basename(filename, getExtname(filename));\n\n  if (/^([A-Z])(.+)/.test(basename)) {\n    const camel = camelCase(basename);\n    const upperFirstCase = camel.charAt(0).toUpperCase() + camel.slice(1);\n    return doFilenamify(upperFirstCase);\n  }\n\n  const raw = camelCase(basename);\n  return doFilenamify(raw);\n}\n", "import { replaceSepToPosix } from 'my-node-fp';\nimport * as path from 'node:path';\n\nexport function posixRelative(originPath: string, targetPath: string): string {\n  return replaceSepToPosix(path.relative(originPath, targetPath));\n}\n", "import { posixRelative } from '#/modules/path/modules/posixRelative';\nimport path from 'node:path';\n\nexport function getRelativeDepth(basePath: string, dirPath: string) {\n  if (basePath == null) {\n    throw new Error('[getRelativeDepth] basePaths is empty array');\n  }\n\n  const relativePath = posixRelative(basePath, dirPath);\n\n  if (relativePath === '') {\n    return 0;\n  }\n\n  const depth = relativePath.split(path.posix.sep);\n  return depth.length;\n}\n", "import { CE_INLINE_COMMENT_KEYWORD } from '#/comments/const-enum/CE_INLINE_COMMENT_KEYWORD';\nimport { getInlineCommented } from '#/comments/getInlineCommented';\nimport { getNodeComments } from '#/comments/getNodeComments';\nimport type { IInlineCommentInfo } from '#/comments/interfaces/IInlineCommentInfo';\nimport { getExportedKind } from '#/compilers/getExportedKind';\nimport { getStatementAlias } from '#/compilers/getStatementAlias';\nimport type { IExportStatement } from '#/compilers/interfaces/IExportStatement';\nimport { filenamify } from '#/modules/path/filenamify';\nimport { getRelativeDepth } from '#/modules/path/getRelativeDepth';\nimport type * as tsm from 'ts-morph';\n\nexport function getSummaryStatement(params: {\n  node: tsm.ExportedDeclarations;\n  project: string;\n  identifier?: string;\n  alias?: string;\n  eol: string;\n  path: IExportStatement['path'];\n  isDefault?: boolean;\n}): IExportStatement {\n  const kind = getExportedKind(params.node);\n  const filenamified = filenamify(params.path.filename);\n  const identifier = params.identifier ?? kind.name ?? filenamified;\n  const comments = getNodeComments(params.node, params.identifier)\n    .map((comment) =>\n      getInlineCommented({\n        comment,\n        options: {\n          keyword: CE_INLINE_COMMENT_KEYWORD.NEXT_STATEMENT_EXCLUDE_KEYWORD,\n        },\n      }),\n    )\n    .filter((comment): comment is IInlineCommentInfo => comment != null);\n\n  const pos = params.node.getSourceFile().getLineAndColumnAtPos(params.node.getStart(false));\n\n  return {\n    path: params.path,\n    depth: getRelativeDepth(params.project, params.path.dirPath),\n    pos,\n    identifier: {\n      name: identifier,\n      alias: getStatementAlias({\n        kind,\n        filenamified,\n        alias: params.alias,\n        isDefault: params.isDefault,\n      }),\n    },\n    isPureType: kind.isPureType,\n    isAnonymous: kind.name == null,\n    isDefault: params.isDefault ?? false,\n    isExcluded: comments.length > 0,\n    comments,\n  } satisfies IExportStatement;\n}\n", "import { replaceSepToPosix } from 'my-node-fp';\nimport * as path from 'node:path';\n\nexport function posixResolve(targetPath: string): string {\n  return replaceSepToPosix(path.resolve(targetPath));\n}\n", "import { getExportedKind } from '#/compilers/getExportedKind';\nimport { getSummaryStatement } from '#/compilers/getSummaryStatement';\nimport type { IExportStatement } from '#/compilers/interfaces/IExportStatement';\nimport type { IExtendOptions } from '#/configs/interfaces/IExtendOptions';\nimport type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\nimport { posixRelative } from '#/modules/path/modules/posixRelative';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { getDirname, replaceSepToPosix, startSepRemove } from 'my-node-fp';\nimport path from 'node:path';\nimport * as tsm from 'ts-morph';\n\nexport async function getExportStatement(\n  sourceFile: tsm.SourceFile,\n  option: Pick<IModeGenerateOptions, 'project' | 'exportFilename'>,\n  extendOptions: Pick<IExtendOptions, 'eol'>,\n): Promise<IExportStatement[]> {\n  const dirPath = posixResolve(await getDirname(sourceFile.getFilePath().toString()));\n  const filename = startSepRemove(\n    replaceSepToPosix(sourceFile.getFilePath().toString().replace(dirPath, '')),\n    path.posix.sep,\n  );\n  // rootDir \uB610\uB294 output, project \uC14B \uC911\uC5D0 \uD558\uB098\uB97C \uC120\uD0DD\uD574\uC11C \uC368\uC57C \uD55C\uB2E4\n  const relativePath = posixRelative(await getDirname(option.project), dirPath);\n  // sourceFile.getExportDeclarations().at(0)?.getNamedExports\n  const exportedDeclarationsMap = sourceFile.getExportedDeclarations();\n  const defaultExportedDeclarations = exportedDeclarationsMap.get('default')?.at(0);\n\n  const defaultExportedName =\n    defaultExportedDeclarations != null\n      ? [\n          getSummaryStatement({\n            path: { filename, dirPath, relativePath },\n            identifier: 'default',\n            node: defaultExportedDeclarations,\n            eol: extendOptions.eol,\n            project: option.project,\n            isDefault: true,\n          }),\n        ]\n      : [];\n\n  const namedExports = Array.from(exportedDeclarationsMap.entries())\n    .filter(([identifier]) => identifier !== 'default')\n    .map((exportedDeclarationsWithKey) => {\n      const [exportedDeclarationKey, exportedDeclarations] = exportedDeclarationsWithKey;\n      const [exportedDeclaration] = exportedDeclarations;\n      const kind = getExportedKind(exportedDeclaration);\n\n      // \uBAA8\uB4C8\uC77C \uB54C \uC65C \uD328\uD134\uC744 \uD558\uB294\uC9C0 \uC798 \uBAA8\uB974\uACA0\uB2E4\n      // declare module \"react\" {} \uAC19\uC740 \uAC83\uC744 \uD560 \uB54C \uD328\uD134\uC774 \uBC1C\uACAC\uB420 \uB9AC\uAC00 \uC5C6\uB294\uB370...\n      // example08\uBC88 \uB54C\uBB38\uC774\uB124...\n      if (exportedDeclaration.getKind() === tsm.SyntaxKind.ModuleDeclaration && kind.name != null) {\n        return getSummaryStatement({\n          path: { filename, dirPath, relativePath },\n          identifier: exportedDeclarationKey,\n          node: exportedDeclaration,\n          project: option.project,\n          eol: extendOptions.eol,\n          isDefault: false,\n        });\n      }\n\n      if (exportedDeclaration.getKind() === tsm.SyntaxKind.SourceFile) {\n        return getSummaryStatement({\n          path: { filename, dirPath, relativePath },\n          identifier: exportedDeclarationKey,\n          node: exportedDeclaration,\n          project: option.project,\n          eol: extendOptions.eol,\n          isDefault: false,\n        });\n      }\n\n      return getSummaryStatement({\n        path: { filename, dirPath, relativePath },\n        node: exportedDeclaration,\n        identifier: exportedDeclarationKey,\n        alias: kind.name !== exportedDeclarationKey && kind.name != null ? kind.name : undefined,\n        project: option.project,\n        eol: extendOptions.eol,\n        isDefault: false,\n      });\n    });\n\n  return [...defaultExportedName, ...namedExports];\n}\n", "export function getFileScope(tsconfig: unknown) {\n  const getInclude = () => {\n    if (\n      typeof tsconfig === 'object' &&\n      tsconfig != null &&\n      'include' in tsconfig &&\n      tsconfig.include != null\n    ) {\n      return tsconfig.include as string[];\n    }\n\n    return [];\n  };\n\n  const getExclude = () => {\n    if (\n      typeof tsconfig === 'object' &&\n      tsconfig != null &&\n      'exclude' in tsconfig &&\n      tsconfig.exclude != null\n    ) {\n      return tsconfig.exclude as string[];\n    }\n\n    return [];\n  };\n\n  return {\n    include: getInclude(),\n    exclude: getExclude(),\n  };\n}\n", "import path from 'node:path';\nimport * as tsm from 'ts-morph';\n\n/**\n * tsconfig.json file find in current working director or cli execute path\n *\n * @param project - project directory\n */\nexport function getTypeScriptConfig(project: string): tsm.ts.ParsedCommandLine {\n  const resolvedProjectPath = path.resolve(project);\n  const parseConfigHost: tsm.ts.ParseConfigHost = {\n    fileExists: tsm.ts.sys.fileExists.bind(tsm.ts),\n    readFile: tsm.ts.sys.readFile.bind(tsm.ts),\n    readDirectory: tsm.ts.sys.readDirectory.bind(tsm.ts),\n    useCaseSensitiveFileNames: true,\n  };\n\n  const configFile = tsm.ts.readConfigFile(resolvedProjectPath, tsm.ts.sys.readFile.bind(tsm.ts));\n\n  const tsconfig = tsm.ts.parseJsonConfigFileContent(\n    configFile.config,\n    parseConfigHost,\n    path.dirname(resolvedProjectPath),\n  );\n\n  return tsconfig;\n}\n", "import * as tsm from 'ts-morph';\n\nexport function getTypeScriptProject(projectOption: tsm.ProjectOptions): tsm.Project {\n  /**\n   * \uC8FC\uC758\n   *\n   * \uD0C0\uC785\uC2A4\uD06C\uB9BD\uD2B8\uB294 `index.ts` \uD30C\uC77C\uC774 \uC788\uC744 \uB54C `index.d.ts` \uD30C\uC77C\uC744 \uC21C\uC218 \uD0C0\uC785 \uC120\uC5B8\uC73C\uB85C \uAC00\uC815\uD558\uACE0 \uD504\uB85C\uC81D\uD2B8\n   * \uD30C\uC77C\uB9AC\uC2A4\uD2B8\uC5D0 \uD3EC\uD568\uC2DC\uD0A4\uC9C0 \uC54A\uB294\uB2E4. \uADF8\uB798\uC11C `project.getSourceFiles().map(s => s.getFilePaths())` \uCF54\uB4DC\uB97C\n   * \uC2E4\uD589\uD574\uC11C \uD30C\uC77C\uC744 \uC0B4\uD3B4\uBCF4\uBA74 `index.d.ts` \uD30C\uC77C\uC774 \uD3EC\uD568\uB418\uC9C0 \uC54A\uC740 \uAC83\uC744 \uD655\uC778\uD560 \uC218 \uC788\uACE0, \uC774\uB85C \uC778\uD574 type04 \uC608\uC81C\uC5D0\uC11C\n   * \uC911\uBCF5 \uCCB4\uD06C \uACBD\uACE0\uAC00 \uB9CE\uC774 \uC904\uC5B4\uB4DC\uB294 \uAC83\uC744 \uBCFC \uC218 \uC788\uB2E4.\n   */\n  const project = new tsm.Project(projectOption);\n  return project;\n}\n", "import * as tsm from 'ts-morph';\n\nconst declarationKindMap: Map<tsm.SyntaxKind, boolean> = new Map([\n  [tsm.SyntaxKind.ModuleDeclaration, true],\n]);\n\nexport function isDeclaration(statement: tsm.SyntaxKind) {\n  const result = declarationKindMap.get(statement);\n\n  if (result != null) {\n    return result;\n  }\n\n  return false;\n}\n", "import { isDeclaration } from '#/compilers/isDeclaration';\nimport type * as tsm from 'ts-morph';\n\nexport function isDeclarationFile(sourceFile: tsm.SourceFile) {\n  const statements = sourceFile.getStatements().map((child) => {\n    return {\n      kind: child.getKind(),\n      kindName: child.getKindName(),\n      text: child.getText(),\n      isDeclaration: isDeclaration(child.getKind()),\n    };\n  });\n\n  return statements.some((statement) => statement.isDeclaration);\n}\n", "import type { IExportStatement } from '#/compilers/interfaces/IExportStatement';\nimport type { IReason } from '#/compilers/interfaces/IReason';\nimport chalk from 'chalk';\nimport pathe from 'pathe';\n\nexport class StatementTable {\n  static key(statement: string | IExportStatement): string {\n    if (typeof statement === 'string') {\n      return statement;\n    }\n\n    const tableKey = statement.isDefault ? statement.identifier.alias : statement.identifier.name;\n    return tableKey;\n  }\n\n  #table: Map<string, IExportStatement[]>;\n\n  constructor() {\n    this.#table = new Map<string, IExportStatement[]>();\n  }\n\n  select(key: string | IExportStatement) {\n    return this.#table.get(StatementTable.key(key)) ?? [];\n  }\n\n  selects() {\n    return Array.from(this.#table.values());\n  }\n\n  insert(statement: IExportStatement) {\n    const key = StatementTable.key(statement);\n    const prev = this.#table.get(key);\n\n    if (prev == null) {\n      this.#table.set(key, [statement]);\n    } else {\n      this.#table.set(key, [...prev, statement]);\n    }\n  }\n\n  inserts(statements: IExportStatement[]) {\n    statements.forEach((statement) => this.insert(statement));\n  }\n\n  isDuplicate(statement: IExportStatement) {\n    const prev = this.#table.get(StatementTable.key(statement));\n\n    if (prev == null) {\n      return false;\n    }\n\n    return prev.length > 1;\n  }\n\n  isDuplicateFromSecond(statement: IExportStatement) {\n    const prev = this.#table.get(StatementTable.key(statement));\n    const first = prev?.at(0);\n\n    if (prev == null || first == null) {\n      return false;\n    }\n\n    const prevStatementKey = `${pathe.join(first.path.dirPath, first.path.filename)}::${\n      first.identifier.alias\n    }`;\n    const nextStatementKey = `${pathe.join(statement.path.dirPath, statement.path.filename)}::${\n      statement.identifier.alias\n    }`;\n\n    if (prevStatementKey === nextStatementKey) {\n      return false;\n    }\n\n    return prev.length > 1;\n  }\n\n  getDuplicateReason() {\n    const reasons = Array.from(this.#table.entries())\n      .map(([identifier, statements]) => ({\n        identifier,\n        statements,\n      }))\n      .filter((symbols) => symbols.statements.length > 1)\n      .map((symbols) => {\n        return symbols.statements.map((statement) => {\n          if (statement.isDefault) {\n            const reason: IReason = {\n              type: 'warn',\n              lineAndCharacter: { line: statement.pos.line, character: statement.pos.column },\n              filePath: pathe.join(statement.path.dirPath, statement.path.filename),\n              message: `detect same name of default export statement: \"${chalk.yellow(\n                StatementTable.key(statement),\n              )}\"`,\n            };\n\n            return reason;\n          }\n\n          const reason: IReason = {\n            type: 'warn',\n            lineAndCharacter: { line: statement.pos.line, character: statement.pos.column },\n            filePath: pathe.join(statement.path.dirPath, statement.path.filename),\n            message: `detect same name of export statement: \"${chalk.yellow(\n              StatementTable.key(statement),\n            )}\"`,\n          };\n\n          return reason;\n        });\n      })\n      .flat();\n\n    return reasons;\n  }\n}\n", "import type * as tsm from 'ts-morph';\n\nexport class SymbolTable {\n  #table: Map<number, tsm.Node>;\n\n  constructor(sourceFile: tsm.SourceFile) {\n    const nodes: [number, tsm.Node][] = [];\n\n    sourceFile.forEachChild((node) => {\n      const pos = node.getStart();\n      nodes.push([pos, node]);\n    });\n\n    this.#table = new Map<number, tsm.Node>(nodes);\n  }\n\n  get table(): Readonly<Map<number, tsm.Node>> {\n    return this.#table;\n  }\n\n  getByPos(pos: number): tsm.Node | undefined {\n    return this.#table.get(pos);\n  }\n}\n", "export const CE_CTIX_COMMAND = {\n  BUILD_COMMAND: 'build',\n  BUILD_COMMAND_ALIAS: 'b',\n\n  REMOVE_COMMAND: 'remove',\n  REMOVE_COMMAND_ALIAS: 'r',\n\n  INIT_COMMAND: 'init',\n  INIT_COMMAND_ALIAS: 'i',\n} as const;\n\nexport type CE_CTIX_COMMAND = (typeof CE_CTIX_COMMAND)[keyof typeof CE_CTIX_COMMAND];\n", "import { CE_CTIX_COMMAND } from '#/configs/const-enum/CE_CTIX_COMMAND';\nimport type { IProjectOptions } from '#/configs/interfaces/IProjectOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCommandRemoveOptions } from '#/configs/interfaces/TCommandRemoveOptions';\n\nexport function castConfig(\n  command: CE_CTIX_COMMAND,\n  config: unknown,\n  paths: {\n    from: 'none' | '.ctirc' | 'tsconfig.json' | 'package.json';\n    config?: string;\n    tsconfig?: string;\n  },\n): TCommandBuildArgvOptions | TCommandRemoveOptions | IProjectOptions {\n  switch (command) {\n    case CE_CTIX_COMMAND.BUILD_COMMAND:\n      return {\n        ...(config as TCommandBuildArgvOptions),\n        from: paths.from,\n        p: paths.tsconfig,\n        project: paths.tsconfig,\n        c: paths.config,\n        config: paths.config,\n      } as TCommandBuildArgvOptions;\n\n    case CE_CTIX_COMMAND.REMOVE_COMMAND:\n      return {\n        ...(config as TCommandRemoveOptions),\n        from: paths.from,\n        p: paths.tsconfig,\n        project: paths.tsconfig,\n        c: paths.config,\n        config: paths.config,\n      } as TCommandRemoveOptions;\n\n    default:\n      return {\n        from: paths.from,\n        p: paths.tsconfig,\n        project: paths.tsconfig,\n        c: paths.config,\n        config: paths.config,\n        exportFilename: 'index.ts',\n        'export-filename': 'index.ts',\n        spinnerStream: 'stderr',\n        'spinner-stream': 'stderr',\n        progressStream: 'stderr',\n        'progress-stream': 'stderr',\n        reasonerStream: 'stderr',\n        'reasoner-stream': 'stderr',\n      } as IProjectOptions;\n  }\n}\n", "export function getConfigObject(\n  argv: Record<string, unknown>,\n  ...keywordArgs: string[]\n): Record<string, unknown> | undefined {\n  const keywords = [...keywordArgs];\n  const keys = keywords.filter((keyword) => keyword in argv && argv[keyword] != null);\n\n  if (keys.length <= 0) {\n    return undefined;\n  }\n\n  const aggregated = keys.reduce<Record<string, unknown>>((obj, key) => {\n    return { ...obj, [key]: argv[key] };\n  }, {});\n\n  return aggregated;\n}\n", "import { atOrUndefined } from 'my-easy-fp';\n\nexport function getConfigValue(\n  argv: Record<string, unknown>,\n  ...keywordArgs: string[]\n): string | undefined {\n  const keywords = [...keywordArgs];\n\n  if (keywords.length <= 0) {\n    return undefined;\n  }\n\n  const keys = keywords.find((keyword) => keyword in argv && typeof argv[keyword] === 'string');\n  const key = atOrUndefined(keys, 0);\n\n  if (key != null && key in argv && argv[key] != null) {\n    const value = argv[key] as string;\n    return value;\n  }\n\n  return undefined;\n}\n", "import fs from 'node:fs';\nimport os from 'node:os';\n\n// https://stackoverflow.com/questions/34820267/detecting-type-of-line-breaks\nexport function getEOL(text: string) {\n  const eolMatched = text.match(/\\r\\n|\\n/g);\n\n  if (eolMatched == null) {\n    return os.EOL;\n  }\n\n  const numOfNl = eolMatched.filter((eol) => eol === '\\n').length;\n  const numOfCr = eolMatched.length - numOfNl;\n\n  if (numOfNl === numOfCr) {\n    return os.EOL; // use the OS default\n  }\n\n  return numOfNl > numOfCr ? '\\n' : '\\r\\n';\n}\n\nexport async function getSourceFileEol(sourceFiles: string[]): Promise<string> {\n  const eols = (\n    await Promise.all(\n      sourceFiles.map(async (srouceFile) => {\n        try {\n          const buf = await fs.promises.readFile(srouceFile);\n          const eol = getEOL(buf.toString());\n          return eol;\n        } catch {\n          return undefined;\n        }\n      }),\n    )\n  ).filter((eol): eol is string => eol != null);\n\n  const eolRecord = eols.reduce<Record<string, number>>((aggregated, eol) => {\n    return { ...aggregated, [eol]: (aggregated[eol] ?? 0) + 1 };\n  }, {});\n\n  const eolWithWeight = Object.entries(eolRecord).reduce(\n    (max, eolPair) => {\n      const [eolCharacter, weight] = eolPair;\n\n      if (max.weight < (weight ?? Number.MIN_SAFE_INTEGER)) {\n        return { eol: eolCharacter, weight };\n      }\n\n      return max;\n    },\n    {\n      eol: os.EOL,\n      weight: Number.MIN_SAFE_INTEGER,\n    },\n  );\n\n  return eolWithWeight.eol;\n}\n", "import { replaceSepToPosix } from 'my-node-fp';\nimport path from 'node:path';\n\nexport function getDepth(dirPath: string) {\n  const sepReplaced = replaceSepToPosix(dirPath);\n  const depth = sepReplaced.split(path.posix.sep);\n  return depth.length;\n}\n", "import { getTypeScriptConfig } from '#/compilers/getTypeScriptConfig';\nimport type { IExtendOptions } from '#/configs/interfaces/IExtendOptions';\nimport { getSourceFileEol } from '#/configs/modules/getSourceFileEol';\nimport { getDepth } from '#/modules/path/getDepth';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { settify } from 'my-easy-fp';\nimport { getDirname, isDescendant, replaceSepToPosix } from 'my-node-fp';\n\nexport async function getExtendOptions(project: string): Promise<IExtendOptions> {\n  const projectPath = posixResolve(project);\n  const tsconfig = getTypeScriptConfig(projectPath);\n  const resolvedProjectDirPath = replaceSepToPosix(await getDirname(projectPath));\n\n  // \uC5EC\uB7EC\uAC00\uC9C0 \uD14C\uC2A4\uD2B8\uB97C \uD574\uBCF8 \uACB0\uACFC, include\uC5D0 \uC544\uBB34\uAC83\uB3C4 \uC9C0\uC815\uD558\uC9C0 \uC54A\uC740 \uD504\uB85C\uC81D\uD2B8\uB294 tsconfig.json \uD30C\uC77C\uBCF4\uB2E4\n  // \uB354 \uC0C1\uC704 \uB514\uB809\uD130\uB9AC\uC5D0 \uC788\uB294 ts \uD30C\uC77C\uB3C4 \uBAA8\uB450 \uD3EC\uD568\uD55C\uB2E4. \uC774\uB7F0 \uC2DD\uC73C\uB85C \uD544\uD130\uB97C \uAC78\uC5B4\uC11C, tsconfig.json \uD30C\uC77C\uBCF4\uB2E4\n  // \uC0C1\uC704\uC5D0 \uC788\uB294 \uAC83\uC744 \uC81C\uC678\uD558\uB294 \uC791\uC5C5\uC774 \uD544\uC694\uD558\uB2E4\n  const filePaths = tsconfig.fileNames.filter((filePath) =>\n    isDescendant(resolvedProjectDirPath, filePath),\n  );\n\n  const topDirDepth = (\n    await Promise.all(\n      filePaths.map(async (filePath) => {\n        const dirPath = replaceSepToPosix(posixResolve(await getDirname(filePath)));\n        return {\n          filePaths: [dirPath],\n          depth: getDepth(dirPath),\n        };\n      }),\n    )\n  ).reduce(\n    (minDepth, depth) => {\n      if (minDepth.depth > depth.depth) {\n        return { ...depth, filePaths: settify(minDepth.filePaths.concat(depth.filePaths)) };\n      }\n\n      if (minDepth.depth === depth.depth) {\n        return { ...minDepth, filePaths: settify(minDepth.filePaths.concat(depth.filePaths)) };\n      }\n\n      return minDepth;\n    },\n    {\n      filePaths: [],\n      depth: Number.MAX_SAFE_INTEGER,\n    },\n  );\n\n  const eol = await getSourceFileEol([...tsconfig.fileNames].slice(0, 30));\n\n  return {\n    eol,\n    tsconfig,\n    topDir: {\n      dirs: topDirDepth.filePaths,\n      depth: 0,\n    },\n    resolved: {\n      projectDirPath: resolvedProjectDirPath,\n      projectFilePath: projectPath,\n    },\n  };\n}\n", "export const CE_CTIX_DEFAULT_VALUE = {\n  CONFIG_FILENAME: '.ctirc',\n  TSCONFIG_FILENAME: 'tsconfig.json',\n  EXPORT_FILENAME: 'index.ts',\n  PACKAGE_JSON_FILENAME: 'package.json',\n  REMOVE_FILE_CHOICE_FUZZY: 50,\n} as const;\n\nexport type CE_CTIX_DEFAULT_VALUE =\n  (typeof CE_CTIX_DEFAULT_VALUE)[keyof typeof CE_CTIX_DEFAULT_VALUE];\n", "import { CE_CTIX_COMMAND } from '#/configs/const-enum/CE_CTIX_COMMAND';\nimport { atOrUndefined, toArray } from 'my-easy-fp';\n\nexport function getCommand(raw: (string | number)[]): CE_CTIX_COMMAND {\n  const command = atOrUndefined(toArray(raw), 0);\n\n  switch (command) {\n    case CE_CTIX_COMMAND.BUILD_COMMAND:\n    case CE_CTIX_COMMAND.BUILD_COMMAND_ALIAS:\n      return CE_CTIX_COMMAND.BUILD_COMMAND;\n    case CE_CTIX_COMMAND.REMOVE_COMMAND:\n    case CE_CTIX_COMMAND.REMOVE_COMMAND_ALIAS:\n      return CE_CTIX_COMMAND.REMOVE_COMMAND;\n    case CE_CTIX_COMMAND.INIT_COMMAND:\n    case CE_CTIX_COMMAND.INIT_COMMAND_ALIAS:\n      return CE_CTIX_COMMAND.INIT_COMMAND;\n    default:\n      throw new Error();\n  }\n}\n", "import { exists } from 'my-node-fp';\nimport pathe from 'pathe';\n\nexport async function getConfigFilePath(fileName: string, configFilePath?: string) {\n  if (configFilePath != null) {\n    return configFilePath;\n  }\n\n  const cwdConfigFilePath = pathe.join(process.cwd(), fileName);\n\n  if (await exists(cwdConfigFilePath)) {\n    return cwdConfigFilePath;\n  }\n\n  return undefined;\n}\n", "export function getString(buf: Buffer | string): string {\n  return buf instanceof Buffer ? buf.toString() : buf;\n}\n", "import { getString } from '#/configs/modules/json/getString';\nimport { parse } from 'json5';\nimport { isError } from 'my-easy-fp';\nimport { fail, pass, type PassFailEither } from 'my-only-either';\n\nexport function readJson5<T = unknown>(buf: Buffer | string): PassFailEither<Error, T> {\n  try {\n    const stringified = getString(buf);\n    const parsed = parse<T>(stringified);\n    return pass(parsed);\n  } catch (caught) {\n    const err = isError(caught, new Error('unknown error raised'));\n    return fail(err);\n  }\n}\n", "import { getString } from '#/configs/modules/json/getString';\nimport { parse, printParseErrorCode, type ParseError } from 'jsonc-parser';\nimport { atOrThrow, isError } from 'my-easy-fp';\nimport { fail, pass, type PassFailEither } from 'my-only-either';\n\nexport function readJsonc<T = unknown>(buf: Buffer | string): PassFailEither<Error, T> {\n  try {\n    const stringified = getString(buf);\n    const errors: ParseError[] = [];\n    const parsed = parse(stringified, errors) as T;\n\n    if (errors.length > 0) {\n      throw new Error(\n        `JSONC: [${printParseErrorCode(atOrThrow(errors, 0).error)}] invalid character ${\n          atOrThrow(errors, 0).length\n        }:${atOrThrow(errors, 0).offset}`,\n      );\n    }\n\n    return pass(parsed);\n  } catch (caught) {\n    const err = isError(caught, new Error('unknown error raised'));\n    return fail(err);\n  }\n}\n", "import { getString } from '#/configs/modules/json/getString';\nimport { isError } from 'my-easy-fp';\nimport { fail, pass, type PassFailEither } from 'my-only-either';\nimport { parse } from 'yaml';\n\nexport function readYaml<T = unknown>(buf: Buffer | string): PassFailEither<Error, T> {\n  try {\n    const stringified = getString(buf);\n    const parsed = parse(stringified) as T;\n    return pass(parsed);\n  } catch (caught) {\n    const err = isError(caught, new Error('unknown error raised'));\n    return fail(err);\n  }\n}\n", "import { readJson5 } from '#/configs/modules/json/readJson5';\nimport { readJsonc } from '#/configs/modules/json/readJsonc';\nimport { readYaml } from '#/configs/modules/json/readYml';\n\nexport function parseConfig<T = unknown>(buf: Buffer | string) {\n  // step 01. try jsonc\n  const jsonc = readJsonc<T>(buf);\n\n  if (jsonc.type === 'pass') {\n    return jsonc.pass;\n  }\n\n  // step 02. try json5\n  const json5 = readJson5<T>(buf);\n\n  if (json5.type === 'pass') {\n    return json5.pass;\n  }\n\n  // step 03. try yaml\n  const yaml = readYaml<T>(buf);\n\n  if (yaml.type === 'pass') {\n    return yaml.pass;\n  }\n\n  throw jsonc.fail;\n}\n", "import { parseConfig } from '#/configs/parseConfig';\nimport fs from 'fs';\nimport { isError } from 'my-easy-fp';\nimport { type PassFailEither, fail, pass } from 'my-only-either';\n\nexport async function readConfigFromFile(\n  configFilePath: string,\n): Promise<PassFailEither<Error, Record<string, unknown>>> {\n  try {\n    const buf = await fs.promises.readFile(configFilePath);\n    const parsed = parseConfig<Record<string, unknown>>(buf);\n\n    if (typeof parsed !== 'object') {\n      return fail(new Error(`invalid configuration file format: ${parsed as string}`));\n    }\n\n    return pass(parsed);\n  } catch (caught) {\n    const err = isError(caught, new Error('unknown error raised from configuration reading'));\n    return fail(err);\n  }\n}\n", "import fs from 'fs';\nimport { isError } from 'my-easy-fp';\nimport { type PassFailEither, fail, pass } from 'my-only-either';\nimport pathe from 'pathe';\nimport type { PackageJson } from 'type-fest';\n\nexport async function readConfigFromPackageJson(): Promise<\n  PassFailEither<Error, Record<string, unknown>>\n> {\n  try {\n    const packageJsonFilePath = pathe.join(process.cwd(), 'package.json');\n    const buf = await fs.promises.readFile(packageJsonFilePath);\n    const packageJson = JSON.parse(buf.toString()) as PackageJson;\n\n    if (\n      'ctix' in packageJson &&\n      typeof packageJson.ctix === 'object' &&\n      packageJson.ctix != null &&\n      Object.keys(packageJson.ctix).length > 0\n    ) {\n      const config = packageJson.ctix as Record<string, unknown>;\n      return pass(config);\n    }\n\n    return fail(new Error('cannot read configuration from package.json'));\n  } catch (caught) {\n    const err = isError(caught, new Error('unknown error raised from configuration reading'));\n    return fail(err);\n  }\n}\n", "import { readJsonc } from '#/configs/modules/json/readJsonc';\nimport fs from 'fs';\nimport { isError } from 'my-easy-fp';\nimport { type PassFailEither, fail, pass } from 'my-only-either';\n\nexport async function readConfigFromTsconfigJson(\n  tsconfigFilePath: string,\n): Promise<PassFailEither<Error, Record<string, unknown>>> {\n  try {\n    const buf = await fs.promises.readFile(tsconfigFilePath);\n    const parsed = readJsonc<Record<string, unknown>>(buf);\n\n    if (parsed.type === 'fail') {\n      return parsed;\n    }\n\n    const tsconfig = parsed.pass;\n\n    if (\n      'ctix' in tsconfig &&\n      typeof tsconfig.ctix === 'object' &&\n      tsconfig.ctix != null &&\n      Object.keys(tsconfig.ctix).length > 0\n    ) {\n      const config = tsconfig.ctix as Record<string, unknown>;\n      return pass(config);\n    }\n\n    return fail(new Error(`cannot read configuration from ${tsconfigFilePath}`));\n  } catch (caught) {\n    const err = isError(caught, new Error('unknown error raised from configuration reading'));\n    return fail(err);\n  }\n}\n", "import { typeCheck } from 'type-check';\n\nexport function getCheckedValue<T>(types: string, value: unknown): T | undefined {\n  const checked = typeCheck(types, value);\n\n  if (checked) {\n    return value as T;\n  }\n\n  return undefined;\n}\n", "import { castConfig } from '#/configs/castConfig';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport { getConfigObject } from '#/configs/getConfigObject';\nimport { getConfigValue } from '#/configs/getConfigValue';\nimport type { IProjectOptions } from '#/configs/interfaces/IProjectOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCommandRemoveOptions } from '#/configs/interfaces/TCommandRemoveOptions';\nimport { getCommand } from '#/configs/modules/getCommand';\nimport { getConfigFilePath } from '#/configs/modules/getConfigFilePath';\nimport { readConfigFromFile } from '#/configs/modules/readConfigFromFile';\nimport { readConfigFromPackageJson } from '#/configs/modules/readConfigFromPackageJson';\nimport { readConfigFromTsconfigJson } from '#/configs/modules/readConfigFromTsconfigJson';\nimport { getCheckedValue } from '#/modules/values/getCheckedValue';\nimport consola from 'consola';\nimport minimist from 'minimist';\nimport { isError } from 'my-easy-fp';\n\nexport async function loadConfig(): Promise<\n  TCommandBuildArgvOptions | TCommandRemoveOptions | IProjectOptions\n> {\n  try {\n    const configValueKeys = [\n      'force-yes',\n      'y',\n      'remove-backup',\n      'export-filename',\n      'f',\n      'output',\n      'o',\n      'skip-empty-dir',\n      'start-from',\n      'project',\n      'p',\n      'mode',\n      'use-semicolon',\n      'use-banner',\n      'quote',\n      'q',\n      'directive',\n      'file-ext',\n      'overwrite',\n      'w',\n      'backup',\n      'generation-style',\n      'include-files',\n      'exclude-files',\n      'config',\n      'c',\n      'spinner-stream',\n      'progress-stream',\n      'reasoner-stream',\n    ];\n    const argv = minimist(process.argv.slice(2));\n\n    // const configFilePath = getConfigFilePath(argv, tsconfigPath);\n    const command = getCommand(argv._);\n\n    const configFilePath = await getConfigFilePath(\n      CE_CTIX_DEFAULT_VALUE.CONFIG_FILENAME,\n      getConfigValue(argv, 'c', 'config'),\n    );\n\n    const tsconfigFilePath = await getConfigFilePath(\n      CE_CTIX_DEFAULT_VALUE.TSCONFIG_FILENAME,\n      getConfigValue(argv, 'p', 'project'),\n    );\n\n    const configFileEither =\n      configFilePath != null ? await readConfigFromFile(configFilePath) : undefined;\n\n    // case 1. using .ctirc\n    if (configFileEither != null && configFileEither.type === 'pass') {\n      const projectFilePath =\n        getCheckedValue<string>('String', getConfigValue(argv, 'p', 'project')) ??\n        getCheckedValue<string>('String', configFileEither.pass.p) ??\n        getCheckedValue<string>('String', configFileEither.pass.project) ??\n        tsconfigFilePath;\n\n      const config = castConfig(\n        command,\n        {\n          ...configFileEither.pass,\n          ...getConfigObject(argv, ...configValueKeys),\n        },\n        {\n          from: '.ctirc',\n          config: configFilePath,\n          tsconfig: projectFilePath,\n        },\n      );\n\n      return config;\n    }\n\n    const tsconfigEither =\n      tsconfigFilePath != null ? await readConfigFromTsconfigJson(tsconfigFilePath) : undefined;\n\n    if (tsconfigEither != null && tsconfigEither.type === 'pass') {\n      const config = castConfig(\n        command,\n        {\n          ...tsconfigEither.pass,\n          ...getConfigObject(argv, ...configValueKeys),\n        },\n        {\n          from: 'tsconfig.json',\n          config: configFilePath,\n          tsconfig: tsconfigFilePath,\n        },\n      );\n\n      return config;\n    }\n\n    const packageJsonEither = await readConfigFromPackageJson();\n\n    if (packageJsonEither.type === 'pass') {\n      const config = castConfig(\n        command,\n        {\n          ...packageJsonEither.pass,\n          ...getConfigObject(argv, ...configValueKeys),\n        },\n        {\n          from: 'package.json',\n          config: configFilePath,\n          tsconfig: tsconfigFilePath,\n        },\n      );\n\n      return config;\n    }\n\n    // case 4. in case of a read failure from .ctirc, tsconfig.json, or package.json\n    const config = castConfig(\n      command,\n      {\n        ...getConfigObject(argv, ...configValueKeys),\n      },\n      {\n        from: 'none',\n        config: configFilePath,\n        tsconfig: tsconfigFilePath,\n      },\n    );\n\n    return config;\n  } catch (catched) {\n    const err = isError(catched, new Error('unknown error raised'));\n    consola.debug(err);\n\n    return {} as unknown as TCommandBuildArgvOptions;\n  }\n}\n", "import type { ICommandInitOptions } from '#/configs/interfaces/ICommandInitOptions';\nimport type { Argv } from 'yargs';\n\nexport function setCommandInitOptions<T = Argv<ICommandInitOptions>>(\n  args: Argv<ICommandInitOptions>,\n) {\n  args.option('force-yes', {\n    alias: 'y',\n    describe: 'answer `yes` to all questions',\n    type: 'boolean',\n    default: false,\n  });\n\n  return args as T;\n}\n", "import type { ICommandRemoveOptions } from '#/configs/interfaces/ICommandRemoveOptions';\nimport type { Argv } from 'yargs';\n\nexport function setCommandRemoveOptions<T = Argv<ICommandRemoveOptions>>(\n  args: Argv<ICommandRemoveOptions>,\n) {\n  args\n    .option('remove-backup', {\n      describe: 'remove with backup file',\n      type: 'boolean',\n      default: false,\n    })\n    .option('force-yes', {\n      alias: 'y',\n      describe: 'answer `yes` to all questions',\n      type: 'boolean',\n      default: false,\n    })\n    .option('export-filename', {\n      alias: 'f',\n      describe: 'Export filename, if you not pass this field that use \"index.ts\" or \"index.d.ts\"',\n      type: 'string',\n    });\n\n  return args as T;\n}\n", "import type { IModeBundleOptions } from '#/configs/interfaces/IModeBundleOptions';\nimport type { Argv } from 'yargs';\n\nexport function setModeBundleOptions<T = Argv<IModeBundleOptions>>(args: Argv<IModeBundleOptions>) {\n  args.option('output', {\n    alias: 'o',\n    describe: 'output directory',\n    type: 'string',\n  });\n\n  return args as T;\n}\n", "import type { IModeCreateOptions } from '#/configs/interfaces/IModeCreateOptions';\nimport type { Argv } from 'yargs';\n\nexport function setModeCreateOptions<T = Argv<IModeCreateOptions>>(args: Argv<IModeCreateOptions>) {\n  args\n    .option('skip-empty-dir', {\n      describe:\n        'if `skipEmptyDir` is set to true, an empty directory with no files will not create an `index.ts` file',\n      type: 'boolean',\n      default: true,\n    })\n    .option('start-from', {\n      describe: 'specify the starting directory to start creating the `index.ts` file',\n      type: 'string',\n    });\n\n  return args as T;\n}\n", "/**\n * build mode\n *\n * `index.ts` \uD30C\uC77C\uC744 \uC0DD\uC131\uD560 \uBAA8\uB4DC\uC785\uB2C8\uB2E4. \uB514\uB809\uD1A0\uB9AC \uB9C8\uB2E4 `index.ts` \uD30C\uC77C\uC744 \uC0DD\uC131\uD558\uB294 create, \uD558\uB098\uC758 `index.ts` \uD30C\uC77C\uC744\n * \uC0DD\uC131\uD558\uB294 bundle, vue, sevelte \uB4F1\uC744 \uC704\uD574 \uD30C\uC77C \uC774\uB984\uC73C\uB85C `index.ts` \uD30C\uC77C\uC744 \uC0DD\uC131\uD558\uB294 module \uBAA8\uB4DC\uAC00 \uC788\uC2B5\uB2C8\uB2E4\n *\n * The mode in which the `index.ts` file is to be generated. There is a create mode that\n * generates an `index.ts` file per directory, a bundle mode that generates a single `index.ts` file,\n * and a module mode that generates an `index.ts` file by filename for `vue`, `sevelte`, etc.\n *\n * - create: create an `index.ts` file in each directory\n * - bundle: bundle all export information in one `index.ts` file\n * - module: create an `index.ts` file using the module filename\n */\nexport const CE_CTIX_BUILD_MODE = {\n  CREATE_MODE: 'create',\n  BUNDLE_MODE: 'bundle',\n  MODULE_MODE: 'module',\n} as const;\n\nexport type CE_CTIX_BUILD_MODE = (typeof CE_CTIX_BUILD_MODE)[keyof typeof CE_CTIX_BUILD_MODE];\n", "export const CE_EXTENSION_PROCESSING = {\n  NOT_EXTENSION: 'none',\n  KEEP_EXTENSION: 'keep',\n  REPLACE_JS: 'to-js',\n} as const;\n\nexport type CE_EXTENSION_PROCESSING =\n  (typeof CE_EXTENSION_PROCESSING)[keyof typeof CE_EXTENSION_PROCESSING];\n", "import { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport { CE_EXTENSION_PROCESSING } from '#/configs/const-enum/CE_EXTENSION_PROCESSING';\nimport { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\nimport type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\nimport type { IModeTsGenerateOptions } from '#/configs/interfaces/IModeTsGenerateOptions';\nimport type { Argv } from 'yargs';\n\nexport function setModeGenerateOptions<T = Argv<IModeGenerateOptions & IModeTsGenerateOptions>>(\n  args: Argv<IModeGenerateOptions & IModeTsGenerateOptions>,\n) {\n  args\n    .option('project', {\n      alias: 'p',\n      describe: 'tsconfig.json path: you must pass path with filename, like this \"./tsconfig.json\"',\n      type: 'string',\n    })\n    .option('mode', {\n      describe: [\n        'The mode in which the `index.ts` file is to be generated. There is a create mode that',\n        'generates an `index.ts` file per directory, a bundle mode that generates a single `index.ts` file,',\n        'and a module mode that generates an `index.ts` file by filename for `vue`, `sevelte`, etc.',\n      ].join(''),\n      type: 'string',\n      choices: [\n        CE_CTIX_BUILD_MODE.BUNDLE_MODE,\n        CE_CTIX_BUILD_MODE.CREATE_MODE,\n        CE_CTIX_BUILD_MODE.MODULE_MODE,\n      ],\n    })\n    .option('export-filename', {\n      alias: 'f',\n      describe: 'Export filename, if you not pass this field that use \"index.ts\" or \"index.d.ts\"',\n      type: 'string',\n    })\n    .option('use-semicolon', {\n      describe: 'add semicolon on every export statement',\n      type: 'boolean',\n    })\n    .option('use-banner', {\n      describe:\n        'add ctix comment at first line of creted index.ts file, that remark created from ctix',\n      type: 'boolean',\n    })\n    .option('quote', {\n      alias: 'q',\n      describe: 'change quote character at export syntax',\n      type: 'string',\n    })\n    .option('directive', {\n      describe:\n        'Use to add a literal like `\"use strict\"` to the top. It will be added before the banner.',\n      type: 'string',\n    })\n    .option('file-ext', {\n      describe: 'keep file extension in export statement path',\n      type: 'string',\n      choices: [\n        CE_EXTENSION_PROCESSING.NOT_EXTENSION,\n        CE_EXTENSION_PROCESSING.REPLACE_JS,\n        CE_EXTENSION_PROCESSING.KEEP_EXTENSION,\n      ],\n    })\n    .option('overwrite', {\n      alias: 'w',\n      describe: 'overwrite each index.ts file',\n      type: 'boolean',\n    })\n    .option('backup', {\n      describe: [\n        'create a backup file if the `index.ts` file already exists.',\n        'This option only works if the `overwrite` option is enabled',\n      ].join(' '),\n      type: 'boolean',\n    })\n    .option('generation-style', {\n      describe: 'When generating the `index.ts` file, decide how you want to generate it',\n      type: 'string',\n      choices: [\n        CE_GENERATION_STYLE.AUTO,\n        CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_DESTRUCTIVE,\n        CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_STAR,\n        CE_GENERATION_STYLE.DEFAULT_NON_ALIAS_NAMED_DESTRUCTIVE,\n        CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_DESTRUCTIVE,\n        CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR,\n      ],\n    })\n    .option('include-files', {\n      describe: [\n        'A list of files to exclude when generating the index.ts file. If no value is set,',\n        'the value of the exclude setting set in the tsconfig.json file is used',\n      ].join(' '),\n      type: 'string',\n    })\n    .option('exclude-files', {\n      describe: [\n        'A list of files to exclude when generating the index.ts file. If no value is set,',\n        'the value of the exclude setting set in the tsconfig.json file is used',\n      ].join(' '),\n      type: 'string',\n    });\n\n  return args as T;\n}\n", "import type { IProjectOptions } from '#/configs/interfaces/IProjectOptions';\nimport type { Argv } from 'yargs';\n\nexport function setProjectOptions<T = Argv<IProjectOptions>>(args: Argv<IProjectOptions>) {\n  args\n    .option('config', {\n      alias: 'c',\n      describe: 'configuration file path',\n      type: 'string',\n      default: undefined,\n    })\n    .option('spinner-stream', {\n      describe: 'Stream of cli spinner, you can pass stdout or stderr',\n      type: 'string',\n      choices: ['stdout', 'stderr'],\n      default: 'stdout',\n    })\n    .option('progress-stream', {\n      describe: 'Stream of cli progress, you can pass stdout or stderr',\n      type: 'string',\n      choices: ['stdout', 'stderr'],\n      default: 'stdout',\n    })\n    .option('reasoner-stream', {\n      describe: [\n        'Stream of cli reasoner.',\n        'Reasoner show name conflict error and already exist index.ts file error.',\n        'You can pass stdout or stderr',\n      ].join(''),\n      type: 'string',\n      choices: ['stdout', 'stderr'],\n      default: 'stderr',\n    });\n\n  return args as T;\n}\n", "import type { TStreamType } from '#/configs/interfaces/TStreamType';\nimport chalk from 'chalk';\nimport { SingleBar } from 'cli-progress';\n\nexport class ProgressBar {\n  static #it: ProgressBar;\n\n  static get it() {\n    return ProgressBar.#it;\n  }\n\n  static #isBootstrap: boolean = false;\n\n  static get isBootstrap() {\n    return ProgressBar.#isBootstrap;\n  }\n\n  static bootstrap() {\n    if (ProgressBar.#isBootstrap) {\n      return;\n    }\n\n    const stream = 'stdout';\n\n    const isEnable = false;\n\n    const bar = new SingleBar({\n      format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n      barCompleteChar: '\\u25A0',\n      barIncompleteChar: ' ',\n      stopOnComplete: true,\n      barsize: 40,\n      stream: process.stdout,\n    });\n\n    ProgressBar.#it = new ProgressBar(bar, stream, isEnable);\n    ProgressBar.#isBootstrap = true;\n  }\n\n  #bar: SingleBar;\n\n  #stream: TStreamType;\n\n  #enable: boolean;\n\n  #head: string;\n\n  constructor(bar: SingleBar, stream: TStreamType, enable: boolean) {\n    this.#bar = bar;\n    this.#stream = stream;\n    this.#enable = enable;\n    this.#head = 'Progress ';\n  }\n\n  set stream(value: TStreamType) {\n    if (value !== this.#stream) {\n      this.#bar.stop();\n\n      this.#bar = new SingleBar({\n        format: `${this.#head}[${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n        barCompleteChar: '\\u25A0',\n        barIncompleteChar: ' ',\n        stopOnComplete: true,\n        barsize: 40,\n        stream: process[value],\n      });\n\n      this.#stream = value;\n    }\n  }\n\n  get enable() {\n    return this.#enable;\n  }\n\n  set enable(value) {\n    this.#enable = value;\n  }\n\n  get head() {\n    return this.#head;\n  }\n\n  set head(value) {\n    this.#head = value;\n\n    this.#bar = new SingleBar({\n      format: `${this.#head}[${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n      barCompleteChar: '\\u25A0',\n      barIncompleteChar: ' ',\n      stopOnComplete: true,\n      barsize: 40,\n      stream: process[this.#stream],\n    });\n  }\n\n  start(max: number, initial?: number) {\n    if (this.#enable) {\n      this.#bar.start(max, initial ?? 0);\n    }\n  }\n\n  increment() {\n    if (this.#enable) {\n      this.#bar.increment();\n    }\n  }\n\n  update(current: number) {\n    if (this.#enable) {\n      this.#bar.update(current);\n    }\n  }\n\n  stop() {\n    this.#bar.update(this.#bar.getTotal());\n    this.#bar.stop();\n  }\n}\n\nProgressBar.bootstrap();\n", "import type { IReason } from '#/compilers/interfaces/IReason';\nimport type { TStreamType } from '#/configs/interfaces/TStreamType';\nimport chalk from 'chalk';\nimport * as path from 'node:path';\n\nexport class Reasoner {\n  static #it: Reasoner;\n\n  static get it() {\n    return Reasoner.#it;\n  }\n\n  static #isBootstrap: boolean = false;\n\n  static get isBootstrap() {\n    return Reasoner.#isBootstrap;\n  }\n\n  static bootstrap() {\n    if (Reasoner.#isBootstrap) {\n      return;\n    }\n\n    const enable = false;\n    const stream = 'stderr';\n\n    Reasoner.#it = new Reasoner(console.error, stream, enable);\n    Reasoner.#isBootstrap = true;\n  }\n\n  #enable: boolean;\n\n  #stream: TStreamType;\n\n  #logger: typeof console.log;\n\n  #streamFunc: typeof console.log | typeof console.error;\n\n  constructor(\n    func: typeof console.log | typeof console.error,\n    stream: TStreamType,\n    enable: boolean,\n  ) {\n    this.#streamFunc = func;\n    this.#stream = stream;\n    this.#enable = enable;\n    this.#logger = console.log;\n  }\n\n  set stream(value: TStreamType) {\n    if (value !== this.#stream) {\n      this.#streamFunc = value === 'stderr' ? console.error : console.log;\n      this.#stream = value;\n    }\n  }\n\n  get enable() {\n    return this.#enable;\n  }\n\n  set enable(value) {\n    this.#enable = value;\n  }\n\n  static messaging(reason: IReason): string {\n    const messageBlock = [''];\n\n    const typeMessage =\n      reason.type === 'error'\n        ? chalk.bgRed(`   ${reason.type.toUpperCase()}   `)\n        : chalk.bgYellow(`   ${chalk.black(reason.type.toUpperCase())}    `);\n\n    const { filePath } = reason;\n\n    const filename =\n      reason.lineAndCharacter == null\n        ? `${path.basename(filePath)}`\n        : `${path.basename(filePath)}:${reason.lineAndCharacter.line}:${\n            reason.lineAndCharacter.character\n          }`;\n\n    const chevronRight = reason.type === 'error' ? chalk.red('>') : chalk.yellow('>');\n\n    messageBlock.push(`${typeMessage} ${filename}`);\n\n    if (reason.lineAndCharacter == null) {\n      messageBlock.push(`   ${chevronRight} ${chalk.gray(`${filePath}`)}`);\n    } else {\n      messageBlock.push(\n        `   ${chevronRight} ${chalk.gray(\n          `${filePath}:${reason.lineAndCharacter.line}:${reason.lineAndCharacter.character}`,\n        )}`,\n      );\n    }\n\n    messageBlock.push(\n      ...reason.message.split('\\n').map((splittedMessage) => {\n        return `   ${chevronRight} ${chalk.gray(splittedMessage.trim())}`;\n      }),\n    );\n\n    messageBlock.push('');\n\n    return messageBlock.join('\\n');\n  }\n\n  start(reasons: IReason[]): void {\n    if (this.#enable === false) {\n      return;\n    }\n\n    const errors = reasons\n      .filter((reason) => reason.type === 'error')\n      .map((reason) => Reasoner.messaging(reason));\n\n    const warns = reasons\n      .filter((reason) => reason.type === 'warn')\n      .map((reason) => Reasoner.messaging(reason));\n\n    this.#logger(warns.join(''));\n    this.#streamFunc(errors.join(''));\n  }\n}\n\nReasoner.bootstrap();\n", "import type { TStreamType } from '#/configs/interfaces/TStreamType';\nimport ora from 'ora';\n\nexport class Spinner {\n  static #it: Spinner;\n\n  static get it() {\n    return Spinner.#it;\n  }\n\n  static #isBootstrap: boolean = false;\n\n  static get isBootstrap() {\n    return Spinner.#isBootstrap;\n  }\n\n  static bootstrap() {\n    if (Spinner.#isBootstrap) {\n      return;\n    }\n\n    const spinner = ora({ text: '', stream: process.stdout });\n    const enable = false;\n    const stream = 'stdout';\n\n    Spinner.#it = new Spinner(spinner, stream, enable);\n    Spinner.#isBootstrap = true;\n  }\n\n  #spinner: ora.Ora;\n\n  #stream: TStreamType;\n\n  #enable: boolean;\n\n  constructor(spinner: ora.Ora, stream: TStreamType, enable: boolean) {\n    this.#spinner = spinner;\n    this.#enable = enable;\n    this.#stream = stream;\n  }\n\n  set stream(value: TStreamType) {\n    if (value !== this.#stream) {\n      this.#spinner.stop();\n      this.#spinner = ora({ text: this.#spinner.text, stream: process[value] });\n      this.#stream = value;\n    }\n  }\n\n  get enable() {\n    return this.#enable;\n  }\n\n  set enable(value) {\n    this.#enable = value;\n  }\n\n  start(message?: string) {\n    if (this.#enable && message != null) {\n      this.#spinner.text = message;\n      this.#spinner.start();\n    } else if (this.#enable) {\n      this.#spinner.start();\n    }\n  }\n\n  messaging(kind: 'succeed' | 'fail' | 'update', message: string) {\n    if (!this.#enable) {\n      return;\n    }\n\n    switch (kind) {\n      case 'succeed':\n        this.#spinner.succeed(message);\n        break;\n      case 'fail':\n        this.#spinner.fail(message);\n        break;\n      default:\n        this.#spinner.text = message;\n    }\n  }\n\n  fail(message: string) {\n    this.messaging('fail', message);\n  }\n\n  succeed(message: string) {\n    this.messaging('succeed', message);\n  }\n\n  update(message: string) {\n    this.messaging('update', message);\n  }\n\n  stop() {\n    // this.#spinner.stopAndPersist();\n    this.#spinner.stop();\n  }\n}\n\nSpinner.bootstrap();\n", "import type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport type { TModuleOptions } from '#/configs/interfaces/TModuleOptions';\nimport { getDirnameSync } from 'my-node-fp';\nimport type { SetRequired } from 'type-fest';\n\nexport function getOutputValue(\n  argv: Pick<\n    SetRequired<Partial<TCommandBuildArgvOptions>, 'project'> & {\n      options?: (TCreateOptions | TBundleOptions | TModuleOptions)[];\n    },\n    'output' | 'project'\n  >,\n  option: Partial<TBundleOptions | TModuleOptions>,\n) {\n  if (argv.output != null) {\n    return argv.output;\n  }\n\n  if (option.output != null) {\n    return option.output;\n  }\n\n  return getDirnameSync(argv.project);\n}\n", "import { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport { CE_EXTENSION_PROCESSING } from '#/configs/const-enum/CE_EXTENSION_PROCESSING';\nimport { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\nimport type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport { getOutputValue } from '#/configs/transforms/getOutputValue';\nimport type { SetRequired } from 'type-fest';\n\nexport function transformBundleMode(\n  argv: SetRequired<Partial<TCommandBuildArgvOptions>, 'project'> & {\n    options?: (TCreateOptions | TBundleOptions)[];\n  },\n  option: Partial<TBundleOptions> & {\n    include: TBundleOptions['include'];\n    exclude: TBundleOptions['exclude'];\n  },\n): TBundleOptions {\n  const output = getOutputValue(argv, option);\n\n  return {\n    mode: CE_CTIX_BUILD_MODE.BUNDLE_MODE,\n    project: argv.project,\n    exportFilename:\n      argv.exportFilename ?? option.exportFilename ?? CE_CTIX_DEFAULT_VALUE.EXPORT_FILENAME,\n    useSemicolon: argv.useSemicolon ?? option.useSemicolon ?? true,\n    useBanner: argv.useBanner ?? option.useBanner ?? false,\n    useTimestamp: argv.useTimestamp ?? option.useTimestamp ?? false,\n    quote: argv.quote ?? option.quote ?? \"'\",\n    directive: argv.directive ?? option.directive ?? '',\n    fileExt: argv.fileExt ?? option.fileExt ?? CE_EXTENSION_PROCESSING.NOT_EXTENSION,\n    overwrite: argv.overwrite ?? option.overwrite ?? false,\n    backup: argv.backup ?? option.backup ?? true,\n    generationStyle: argv.generationStyle ?? option.generationStyle ?? CE_GENERATION_STYLE.AUTO,\n    include: option.include,\n    exclude: option.exclude,\n\n    output,\n  };\n}\n", "import { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport { CE_EXTENSION_PROCESSING } from '#/configs/const-enum/CE_EXTENSION_PROCESSING';\nimport { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\nimport type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport { getDirname } from 'my-node-fp';\nimport pathe from 'pathe';\nimport type { SetRequired } from 'type-fest';\n\nexport async function transformCreateMode(\n  argv: SetRequired<Partial<TCommandBuildArgvOptions>, 'project'> & {\n    options?: (TCreateOptions | TBundleOptions)[];\n  },\n  option: Partial<Omit<TCreateOptions, 'include' | 'exclude'>> & {\n    include: TCreateOptions['include'];\n    exclude: TCreateOptions['exclude'];\n  },\n): Promise<TCreateOptions> {\n  const startFrom =\n    argv.startFrom ?? option.startFrom ?? pathe.resolve(await getDirname(argv.project));\n  const resolvedStartFrom = pathe.isAbsolute(startFrom) ? startFrom : pathe.resolve(startFrom);\n\n  return {\n    mode: CE_CTIX_BUILD_MODE.CREATE_MODE,\n    project: argv.project,\n    exportFilename:\n      argv.exportFilename ?? option.exportFilename ?? CE_CTIX_DEFAULT_VALUE.EXPORT_FILENAME,\n    useSemicolon: argv.useSemicolon ?? option.useSemicolon ?? true,\n    useBanner: argv.useBanner ?? option.useBanner ?? false,\n    useTimestamp: argv.useTimestamp ?? option.useTimestamp ?? false,\n    quote: argv.quote ?? option.quote ?? \"'\",\n    directive: argv.directive ?? option.directive ?? '',\n    fileExt: argv.fileExt ?? option.fileExt ?? CE_EXTENSION_PROCESSING.NOT_EXTENSION,\n    overwrite: argv.overwrite ?? option.overwrite ?? false,\n    backup: argv.backup ?? option.backup ?? true,\n    generationStyle: argv.generationStyle ?? option.generationStyle ?? CE_GENERATION_STYLE.AUTO,\n    include: option.include,\n    exclude: option.exclude,\n\n    skipEmptyDir: argv.skipEmptyDir ?? option.skipEmptyDir ?? true,\n    startFrom: resolvedStartFrom,\n  };\n}\n", "import { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport type { TModuleOptions } from '#/configs/interfaces/TModuleOptions';\nimport { getOutputValue } from '#/configs/transforms/getOutputValue';\nimport type { SetRequired } from 'type-fest';\n\nexport async function transformModuleMode(\n  argv: SetRequired<Partial<TCommandBuildArgvOptions>, 'project'> & {\n    options?: (TCreateOptions | TBundleOptions | TModuleOptions)[];\n  },\n  option: Partial<Omit<TModuleOptions, 'include' | 'exclude'>> & {\n    include: TModuleOptions['include'];\n    exclude: TModuleOptions['exclude'];\n  },\n): Promise<TModuleOptions> {\n  const output = getOutputValue(argv, option);\n\n  return {\n    mode: CE_CTIX_BUILD_MODE.MODULE_MODE,\n    project: argv.project,\n    exportFilename:\n      argv.exportFilename ?? option.exportFilename ?? CE_CTIX_DEFAULT_VALUE.EXPORT_FILENAME,\n    useSemicolon: argv.useSemicolon ?? option.useSemicolon ?? true,\n    useBanner: argv.useBanner ?? option.useBanner ?? false,\n    useTimestamp: argv.useTimestamp ?? option.useTimestamp ?? false,\n    quote: argv.quote ?? option.quote ?? \"'\",\n    directive: argv.directive ?? option.directive ?? '',\n    overwrite: argv.overwrite ?? option.overwrite ?? false,\n    backup: argv.backup ?? option.backup ?? true,\n    include: option.include,\n    exclude: option.exclude,\n\n    output,\n  };\n}\n", "import { getFileScope } from '#/compilers/getFileScope';\nimport type { IExtendOptions } from '#/configs/interfaces/IExtendOptions';\nimport type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\n\nexport function getTsExcludeFiles(config: {\n  config: Pick<IModeGenerateOptions, 'exclude'>;\n  extend: Pick<IExtendOptions, 'tsconfig'>;\n}): string[] {\n  if (config.config.exclude != null && config.config.exclude.length > 0) {\n    return config.config.exclude;\n  }\n\n  const { exclude } = getFileScope(config.extend.tsconfig.raw);\n  return exclude;\n}\n", "import { getFileScope } from '#/compilers/getFileScope';\nimport type { IExtendOptions } from '#/configs/interfaces/IExtendOptions';\nimport type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\nimport { isDescendant } from 'my-node-fp';\n\nexport function getTsIncludeFiles(config: {\n  config: Pick<IModeGenerateOptions, 'include'>;\n  extend: Pick<IExtendOptions, 'tsconfig'> & {\n    resolved: Pick<IExtendOptions['resolved'], 'projectDirPath'>;\n  };\n}): string[] {\n  if (config.config.include != null && config.config.include.length > 0) {\n    return config.config.include;\n  }\n\n  const { include } = getFileScope(config.extend.tsconfig.raw);\n\n  if (include.length > 0) {\n    return include;\n  }\n\n  const filePaths = config.extend.tsconfig.fileNames.filter((filePath) =>\n    isDescendant(config.extend.resolved.projectDirPath, filePath),\n  );\n\n  return filePaths;\n}\n", "import { ProgressBar } from '#/cli/ux/ProgressBar';\nimport { Reasoner } from '#/cli/ux/Reasoner';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport { getTypeScriptConfig } from '#/compilers/getTypeScriptConfig';\nimport { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport { CE_CTIX_COMMAND } from '#/configs/const-enum/CE_CTIX_COMMAND';\nimport type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCommandBuildOptions } from '#/configs/interfaces/TCommandBuildOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport { getOutputValue } from '#/configs/transforms/getOutputValue';\nimport { transformBundleMode } from '#/configs/transforms/transformBundleMode';\nimport { transformCreateMode } from '#/configs/transforms/transformCreateMode';\nimport { transformModuleMode } from '#/configs/transforms/transformModuleMode';\nimport { getTsExcludeFiles } from '#/modules/file/getTsExcludeFiles';\nimport { getTsIncludeFiles } from '#/modules/file/getTsIncludeFiles';\nimport { toArray } from 'my-easy-fp';\nimport path from 'node:path';\nimport type { ArgumentsCamelCase } from 'yargs';\n\nexport async function createBuildOptions(\n  argv: ArgumentsCamelCase<TCommandBuildArgvOptions> & {\n    options?: (TCreateOptions | TBundleOptions)[];\n    from?: string;\n  },\n): Promise<TCommandBuildOptions> {\n  const options: TCommandBuildOptions & { from: string } = {\n    $kind: CE_CTIX_COMMAND.BUILD_COMMAND,\n    config: argv.config,\n    from: argv.from ?? 'none',\n    spinnerStream: argv.spinnerStream,\n    progressStream: argv.progressStream,\n    reasonerStream: argv.reasonerStream,\n    options: [],\n  };\n\n  if ('from' in argv && argv.from != null && typeof argv.from === 'string') {\n    options.from = argv.from;\n  }\n\n  Spinner.it.stream = argv.spinnerStream;\n  ProgressBar.it.stream = argv.progressStream;\n  Reasoner.it.stream = argv.reasonerStream;\n\n  // config \uD30C\uC77C\uC744 \uC77D\uC740 \uB2E4\uC74C, options \uD544\uB4DC\uAC00 \uC874\uC7AC\uD558\uB294 \uACBD\uC6B0 argv.include, argv.exclude\uB294 \uBB34\uC2DC\uB41C\uB2E4\n  // After reading the config file, argv.include, argv.exclude are excluded if the options field is present\n  if (argv.options != null) {\n    options.options = argv.options;\n\n    options.options = await Promise.all(\n      options.options.map(async (option) => {\n        if (option.mode === CE_CTIX_BUILD_MODE.MODULE_MODE) {\n          const projectPath = path.resolve(option.project);\n          const tsconfig = getTypeScriptConfig(projectPath);\n\n          const moduleMode = await transformModuleMode(\n            { ...argv, project: projectPath },\n            {\n              ...option,\n              include: getTsIncludeFiles({\n                config: { include: option.include },\n                extend: { tsconfig, resolved: { projectDirPath: projectPath } },\n              }),\n              exclude: getTsExcludeFiles({\n                config: { exclude: option.exclude },\n                extend: { tsconfig },\n              }),\n            },\n          );\n\n          return moduleMode;\n        }\n\n        if (option.mode === CE_CTIX_BUILD_MODE.CREATE_MODE) {\n          const projectPath = path.resolve(option.project);\n          const tsconfig = getTypeScriptConfig(projectPath);\n\n          const createMode = await transformCreateMode(\n            { ...argv, project: projectPath },\n            {\n              ...option,\n              include: getTsIncludeFiles({\n                config: { include: option.include },\n                extend: { tsconfig, resolved: { projectDirPath: projectPath } },\n              }),\n              exclude: getTsExcludeFiles({\n                config: { exclude: option.exclude },\n                extend: { tsconfig },\n              }),\n            },\n          );\n\n          return createMode;\n        }\n\n        const projectPath = path.resolve(option.project);\n        const tsconfig = getTypeScriptConfig(projectPath);\n\n        const bundleMode = transformBundleMode(\n          { ...argv, project: projectPath },\n          {\n            ...option,\n            include: getTsIncludeFiles({\n              config: { include: option.include },\n              extend: { tsconfig, resolved: { projectDirPath: projectPath } },\n            }),\n            exclude: getTsExcludeFiles({\n              config: { exclude: option.exclude },\n              extend: { tsconfig },\n            }),\n          },\n        );\n        return bundleMode;\n      }),\n    );\n\n    return options;\n  }\n\n  const projectPath = path.resolve(argv.project);\n  const tsconfig = getTypeScriptConfig(projectPath);\n\n  const include =\n    argv.include != null\n      ? toArray(argv.include)\n      : getTsIncludeFiles({\n          config: { include: [] },\n          extend: { tsconfig, resolved: { projectDirPath: projectPath } },\n        });\n\n  const exclude =\n    argv.exclude != null\n      ? toArray(argv.exclude)\n      : getTsExcludeFiles({\n          config: { exclude: [] },\n          extend: { tsconfig },\n        });\n\n  const mode = argv.mode ?? CE_CTIX_BUILD_MODE.BUNDLE_MODE;\n\n  if (mode === CE_CTIX_BUILD_MODE.CREATE_MODE) {\n    options.options = [\n      await transformCreateMode(argv, {\n        ...argv,\n        mode: CE_CTIX_BUILD_MODE.CREATE_MODE,\n        include,\n        exclude,\n      }),\n    ];\n\n    return options;\n  }\n\n  const output = getOutputValue(argv, { output: argv.output });\n\n  if (mode === CE_CTIX_BUILD_MODE.MODULE_MODE) {\n    options.options = [\n      await transformModuleMode(argv, {\n        ...argv,\n        mode: CE_CTIX_BUILD_MODE.MODULE_MODE,\n        include,\n        exclude,\n      }),\n    ];\n\n    return options;\n  }\n\n  options.options = [\n    transformBundleMode(argv, {\n      ...argv,\n      mode: CE_CTIX_BUILD_MODE.BUNDLE_MODE,\n      output,\n      include,\n      exclude,\n    }),\n  ];\n\n  return options;\n}\n", "import { getTypeScriptProject } from '#/compilers/getTypeScriptProject';\nimport path from 'node:path';\nimport type * as tsm from 'ts-morph';\n\nexport class ProjectContainer {\n  static #it: ProjectContainer;\n\n  static get it(): ProjectContainer {\n    return ProjectContainer.#it;\n  }\n\n  static #isBootstrap: boolean = false;\n\n  static get isBootstrap(): boolean {\n    return ProjectContainer.#isBootstrap;\n  }\n\n  static project(projectPath: string) {\n    if (!ProjectContainer.#isBootstrap) {\n      throw new Error('NOT_INITIALIZE_ERROR: please, initialize before use');\n    }\n\n    return ProjectContainer.#it.project(projectPath);\n  }\n\n  static addSourceFilesAtPaths(projectPath: string, filePaths: string[]) {\n    if (!ProjectContainer.#isBootstrap) {\n      throw new Error('NOT_INITIALIZE_ERROR: please, initialize before use');\n    }\n\n    return ProjectContainer.#it.addSourceFilesAtPaths(projectPath, filePaths);\n  }\n\n  static bootstrap() {\n    if (ProjectContainer.#isBootstrap) {\n      return;\n    }\n\n    ProjectContainer.#it = new ProjectContainer();\n    ProjectContainer.#isBootstrap = true;\n  }\n\n  #projects: Map<string, tsm.Project>;\n\n  constructor() {\n    this.#projects = new Map<string, tsm.Project>();\n  }\n\n  project(projectPath: string): tsm.Project {\n    const project = this.#projects.get(projectPath);\n\n    if (project != null) {\n      return project;\n    }\n\n    const loadedProject = getTypeScriptProject({\n      tsConfigFilePath: path.resolve(projectPath),\n    });\n\n    this.#projects.set(projectPath, loadedProject);\n\n    return loadedProject;\n  }\n\n  addSourceFilesAtPaths(projectPath: string, filePaths: string[]) {\n    const project = this.#projects.get(projectPath);\n\n    if (project == null) {\n      throw new Error(`Cannot found tsconfig.json: ${project}`);\n    }\n\n    filePaths.forEach((filePath) => {\n      project.addSourceFileAtPath(filePath);\n    });\n  }\n}\n\nProjectContainer.bootstrap();\n", "import type { IReason } from '#/compilers/interfaces/IReason';\nimport { exists } from 'my-node-fp';\n\nexport async function checkOutputFile(outputMap: Map<string, string>) {\n  const filePaths = Array.from(outputMap.keys());\n\n  const filePathExists = await Promise.all(\n    filePaths.map(async (filePath) => {\n      return { exists: await exists(filePath), filePath };\n    }),\n  );\n\n  const reasons = filePathExists\n    .filter((filePathExist) => filePathExist.exists)\n    .map((filePathExist) => {\n      const reason: IReason = {\n        type: 'error',\n        filePath: filePathExist.filePath,\n        message: 'already exist `index.ts` file',\n      };\n\n      return reason;\n    });\n\n  return reasons;\n}\n", "import { replaceSepToPosix } from 'my-node-fp';\nimport * as path from 'node:path';\n\nexport function posixJoin(...args: string[]): string {\n  return replaceSepToPosix(args.join(path.sep));\n}\n", "import type { Glob, GlobOptions } from 'glob';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport path from 'node:path';\n\nexport function getGlobFiles<T extends GlobOptions>(glob: Glob<T>): string[] {\n  const filePathSet = new Set<string>();\n\n  for (const filePath of glob) {\n    filePathSet.add(\n      typeof filePath === 'string'\n        ? replaceSepToPosix(filePath)\n        : replaceSepToPosix(path.join(filePath.path, filePath.name)),\n    );\n  }\n\n  return Array.from(filePathSet);\n}\n", "export const defaultExclude = ['node_modules/**', 'flow-typed/**', 'coverage/**', '.git/**'];\n", "import type { IInlineCommentInfo } from '#/comments/interfaces/IInlineCommentInfo';\nimport type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\nimport { getGlobFiles } from '#/modules/file/getGlobFiles';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { defaultExclude } from '#/modules/scope/defaultExclude';\nimport { Glob, type GlobOptions } from 'glob';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport path from 'node:path';\n\nexport class ExcludeContainer {\n  #globs: Glob<GlobOptions>[];\n\n  #map: Map<string, boolean>;\n\n  #inline: Map<string, IInlineCommentInfo & { filePath: string }>;\n\n  constructor(params: {\n    config: Pick<IModeGenerateOptions, 'exclude'>;\n    inlineExcludeds: IInlineCommentInfo[];\n    cwd: string;\n  }) {\n    const globs = new Glob(params.config.exclude, {\n      absolute: true,\n      ignore: defaultExclude,\n      cwd: params.cwd,\n      windowsPathsNoEscape: true,\n    });\n\n    const files = getGlobFiles(globs).map((filePath): [string, boolean] => [\n      replaceSepToPosix(filePath),\n      true,\n    ]);\n    this.#map = new Map<string, boolean>(files);\n    this.#globs = [globs];\n    this.#inline = new Map<string, IInlineCommentInfo & { filePath: string }>();\n\n    params.inlineExcludeds.forEach((inlineExcluded) => {\n      const filePath = path.isAbsolute(inlineExcluded.filePath)\n        ? replaceSepToPosix(inlineExcluded.filePath)\n        : posixResolve(inlineExcluded.filePath);\n      this.#inline.set(filePath, inlineExcluded);\n    });\n  }\n\n  get globs(): Readonly<Glob<GlobOptions>[]> {\n    return this.#globs;\n  }\n\n  get map(): Readonly<Map<string, boolean>> {\n    return this.#map;\n  }\n\n  isExclude(filePath: string): boolean {\n    if (this.#map.size <= 0 && this.#inline.size <= 0) {\n      return false;\n    }\n\n    if (path.isAbsolute(filePath)) {\n      return this.#map.get(filePath) != null || this.#inline.get(filePath) != null;\n    }\n\n    return (\n      this.#map.get(posixResolve(filePath)) != null ||\n      this.#inline.get(posixResolve(filePath)) != null\n    );\n  }\n}\n", "import type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\nimport { getGlobFiles } from '#/modules/file/getGlobFiles';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { defaultExclude } from '#/modules/scope/defaultExclude';\nimport { Glob, type GlobOptions } from 'glob';\nimport path from 'node:path';\n\nexport class IncludeContainer {\n  #globs: Glob<GlobOptions>[];\n\n  #map: Map<string, boolean>;\n\n  constructor(params: { config: Pick<IModeGenerateOptions, 'include'>; cwd: string }) {\n    const globs = new Glob(params.config.include, {\n      absolute: true,\n      ignore: defaultExclude,\n      cwd: params.cwd,\n      windowsPathsNoEscape: true,\n    });\n\n    const files = getGlobFiles(globs).map((filePath): [string, boolean] => [filePath, true]);\n    this.#map = new Map<string, boolean>(files);\n    this.#globs = [globs];\n  }\n\n  get globs(): Readonly<Glob<GlobOptions>[]> {\n    return this.#globs;\n  }\n\n  get map(): Readonly<Map<string, boolean>> {\n    return this.#map;\n  }\n\n  isInclude(filePath: string): boolean {\n    if (this.#map.size <= 0) {\n      return false;\n    }\n\n    if (path.isAbsolute(filePath)) {\n      return this.#map.get(filePath) != null;\n    }\n\n    return this.#map.get(posixResolve(filePath)) != null;\n  }\n\n  files() {\n    return this.#globs.map((glob) => getGlobFiles(glob)).flat();\n  }\n}\n", "import type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport dayjs from 'dayjs';\n\nexport function getBanner(\n  option: Pick<TCreateOptions | TBundleOptions, 'useBanner' | 'useTimestamp'>,\n  todayArgs?: dayjs.Dayjs,\n): string | undefined {\n  const today = todayArgs ?? dayjs();\n\n  if (option.useBanner && option.useTimestamp) {\n    return `// created from ctix ${today.format('YYYY-MM-DD HH:mm:ss')}`;\n  }\n\n  if (option.useBanner) {\n    return `// created from ctix`;\n  }\n\n  return undefined;\n}\n", "import prettier, { type Options } from 'prettier';\n\nexport async function prettifing(\n  project: string,\n  contents: string,\n  options?: Options,\n): Promise<{ apply: boolean; contents: string }> {\n  try {\n    if (options != null) {\n      const prettiered = await prettier.format(contents, options);\n      return { apply: true, contents: prettiered };\n    }\n\n    const resolved = await prettier.resolveConfig(project, {\n      editorconfig: true,\n    });\n\n    if (resolved != null) {\n      const prettiered = await prettier.format(contents, resolved);\n      return { apply: true, contents: prettiered };\n    }\n\n    return { apply: false, contents };\n  } catch (catched) {\n    return { apply: false, contents };\n  }\n}\n", "import type { IExtendOptions } from '#/configs/interfaces/IExtendOptions';\nimport type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport type { TModuleOptions } from '#/configs/interfaces/TModuleOptions';\nimport { prettifing } from '#/modules/writes/prettifing';\nimport { exists } from 'my-node-fp';\nimport { readFile, writeFile } from 'node:fs/promises';\n\nexport async function indexWrites(\n  indexFiles: { path: string; content: string }[],\n  option: Pick<\n    TCreateOptions | TBundleOptions | TModuleOptions,\n    'directive' | 'useBanner' | 'useTimestamp' | 'backup'\n  >,\n  extendOptions: IExtendOptions,\n) {\n  await Promise.all(\n    indexFiles.map(async (file) => {\n      const prettified = await prettifing(\n        extendOptions.resolved.projectDirPath,\n        `${file.content}${extendOptions.eol}`,\n      );\n\n      if (option.backup) {\n        if (await exists(file.path)) {\n          await writeFile(`${file.path}.bak`, await readFile(file.path));\n        }\n\n        await writeFile(file.path, `${prettified.contents.trim()}${extendOptions.eol}`);\n      } else {\n        await writeFile(file.path, `${prettified.contents.trim()}${extendOptions.eol}`);\n      }\n    }),\n  );\n}\n", "export const CE_TEMPLATE_NAME = {\n  INDEX_FILE_TEMPLATE: 'index-file-template',\n  NESTED_OPTIONS_TEMPLATE: 'nested-options-template',\n  OPTIONS_TEMPLATE: 'options-template',\n  MODULE_INDEX_FILE_TEMPLATE: 'module-index-file-template',\n  DECLARATION_FILE_TEMPLATE: 'declaration-file-template',\n} as const;\n\nexport type CE_TEMPLATE_NAME = (typeof CE_TEMPLATE_NAME)[keyof typeof CE_TEMPLATE_NAME];\n", "export function addExt(filename: string, ext: string) {\n  if (filename.endsWith('.')) {\n    return [filename.trim(), ext.trim()].join('');\n  }\n\n  return [filename.trim(), ext.trim()].join('.');\n}\n", "export const declarationFileTemplate = `\n<%- it.declarations.forEach((declaration) => { -%>\nimport <%-= it.options.quote %><%= declaration.importPath %><%= declaration.extname.render %><%= it.options.quote -%><%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%><%= \"\\\\n\" %>\n<%- }) %>\n`;\n", "export const defaultAliasNamedDestructiveDefaultTemplate = `\n<%- if (it.statement.default != null && it.statement.named.length > 0) { -%>\n\n  export { <%= it.statement.default.isPureType ? 'type ' : '' %>default as <%= it.statement.default.identifier.alias %>, <%= it.statement.named.map((named) => (named.isPureType ? 'type ' + named.identifier.name : named.identifier.name)).join(', ') %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote -%>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<%- } else if (it.statement.default != null) { -%>\n\n  export { <%= it.statement.default.isPureType ? 'type ' : '' %>default as <%= it.statement.default.identifier.alias %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<% } else if (it.statement.named.length > 0) { -%>\n\n  export { <%= it.statement.named.map((named) => (named.isPureType ? 'type ' + named.identifier.name : named.identifier.name)).join(', ') %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<% } else { %>\n<% } -%>\n`;\n", "export const defaultAliasNamedStarDefaultTemplate = `\n<%- if (it.statement.default != null && it.statement.named.length > 0) { -%>\n\n  export { <%= it.statement.default.isPureType ? 'type ' : '' %>default as <%= it.statement.default.identifier.alias %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\\\\n\" -%><%- } else { -%><%-= \"\\\\n\" -%><%- } -%>\n  export * from <%= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<%- } else if (it.statement.default != null) { -%>\n\n  export { <%= it.statement.default.isPureType ? 'type ' : '' %>default as <%= it.statement.default.identifier.alias %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<% } else if (it.statement.named.length > 0) { -%>\n\n  export * from <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<% } else { %>\n<% } -%>\n`;\n", "export const defaultNonAliasNamedDestructiveDefaultTemplate = `\n<%- if (it.statement.default != null && it.statement.named.length > 0) { -%>\n\n  export { default, <%= it.statement.named.map((named) => (named.isPureType ? 'type ' + named.identifier.name : named.identifier.name)).join(', ') %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<%- } else if (it.statement.default != null) { -%>\n\n  export { default } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<% } else if (it.statement.named.length > 0) { -%>\n\n  export { <%= it.statement.named.map((named) => (named.isPureType ? 'type ' + named.identifier.name : named.identifier.name)).join(', ') %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<% } else { %>\n<% } -%>\n`;\n", "export const defaultStarNamedDestructiveDefaultTemplate = `\n<%- if (it.statement.default != null && it.statement.named.length > 0) { -%>\n\n  export * from <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n  export { <%= it.statement.named.map((named) => (named.isPureType ? 'type ' + named.identifier.name : named.identifier.name)).join(', ') %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<%- } else if (it.statement.default != null) { -%>\n\n  export * from <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<% } else if (it.statement.named.length > 0) { -%>\n\n  export { <%= it.statement.named.map((named) => (named.isPureType ? 'type ' + named.identifier.name : named.identifier.name)).join(', ') %> } from<%= \" \" %>\n  <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n\n<% } else { %>\n<% } -%>\n`;\n", "export const defaultStarNamedStarDefaultTemplate = `\nexport * from <%-= it.options.quote %><%= it.statement.importPath %><%= it.statement.extname.render %><%= it.options.quote %>\n<%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n`;\n", "export const indexFileDefaultTemplate = `\n<%- if (it.directive != null && it.directive !== '' && it.banner != null) { -%>\n  <%-= it.directive -%>\n  <%-= it.eol -%>\n<%- } else if (it.directive != null && it.directive !== '') { -%>\n  <%-= it.directive -%>\n  <%-= it.eol -%><%-= it.eol -%>\n<%- } -%>\n\n<%- if (it.directive != null && it.directive !== '' && it.banner != null) { -%>\n  <%-= it.banner -%>\n  <%-= it.eol -%><%-= it.eol -%>\n<%- } else if (it.banner != null) { -%>\n  <%-= it.banner -%>\n  <%-= it.eol -%><%-= it.eol -%>\n<%- } -%>\n\n<%-= it.content -%>\n`;\n", "export const moduleIndexFileDefaultTemplate = `\n<% it.datas.forEach((data) => { %>\n  import <%= data.statement.default.identifier.name %> from<%= \" \" %>\n  <%-= it.options.quote %><%= data.statement.importPath %><%-= data.statement.default.identifier.name -%>\n  <%-= data.statement.extname.render %><%-= it.options.quote %>\n  <%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n<% }); %>\n\n<%= \"\\\\n\" %>\n<%= \"\\\\n\" %>\n\nexport {\n  <% it.datas.forEach((data, index) => { %>\n    <%= data.statement.default.identifier.name %><%- if (it.datas.length !== 1 && it.datas.length > index) { -%><%-= \",\" %><% } %>\n  <% }); %>\n}<%- if (it.options.useSemicolon) { -%><%-= \";\" -%><%- } -%>\n`;\n", "export const nestedOptionDefaultTemplate = `\n{\n  <%- if (it.isComment && it.options.mode != null) { -%>\n  // build mode\n  // - create: create an \\`index.ts\\` file in each directory\n  // - bundle: bundle all export information in one \\`index.ts\\` file\n  <%- } -%>\n  <%- if (it.options.mode != null) { -%>\n  \"mode\": \"<%= it.options.mode %>\",\n  <%- } -%>\n  \n  <%- if (it.isComment && it.options.project != null) { -%>\n  // tsconfig.json path: you must pass path with filename, like this \"./tsconfig.json\"\n  // only work root directory or cli parameter\n  // \n  // @mode all\n  <%- } -%>\n  <%- if (it.options.project != null) { -%>\n  \"project\": \"<%= it.options.project %>\",\n  <%- } -%>\n  \n  <%- if (it.isComment && it.options.exportFilename != null) { -%>\n  // Export filename, if you not pass this field that use \"index.ts\" or \"index.d.ts\"\n  // \n  // @mode create, bundle, remove\n  // @default index.ts\n  <%- } -%>\n  <%- if (it.options.exportFilename != null) { -%>\n  \"exportFilename\": \"<%= it.options.exportFilename %>\",\n  <%- } -%>\n  \n  <%- if (it.addEveryOptions && it.isComment && it.options.useSemicolon != null) { -%>\n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\n  //\n  // @mode create, bundle\n  // @default false\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.useSemicolon != null) { -%>\n  \"useSemicolon\": <%= it.options.useSemicolon %>,\n  <%- } -%>\n  \n  <%- if (it.addEveryOptions && it.isComment && it.options.useBanner != null) { -%>\n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\n  //\n  // @mode create, bundle\n  // @default false\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.useBanner != null) { -%>\n  \"useBanner\": <%= it.options.useBanner %>,\n  <%- } -%>\n  \n  <%- if (it.addEveryOptions && it.isComment && it.options.useTimestamp != null) { -%>\n  // If specified as true, adds the created date to the top of the \\`index.ts\\` file,\n  // this option only works if the \\`useBanner\\` option is enabled\n  //\n  // @mode create, bundle\n  // @default false\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.useTimestamp != null) { -%>\n  \"useTimestamp\": <%= it.options.useTimestamp %>,\n  <%- } -%>\n  \n  <%- if (it.addEveryOptions && it.isComment && it.options.quote != null) { -%>\n  // quote mark \" or '\n  // @mode create, bundle\n  // \n  // @default '\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.quote != null) { -%>\n  \"quote\": \"<%= it.options.quote %>\",\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.directive != null) { -%>\n  // Use to add a literal like \\`\"use strict\"\\` to the top. It will be added before the banner.\n  //\n  // @mode create, bundle\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.directive != null) { -%>\n  \"directive\": \"<%= it.options.directive %>\",\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.fileExt != null) { -%>\n  // keep file extension in export statement path\n  //\n  // if this option set true that see below\n  // export * from './test.ts'\n  //\n  // @mode create, bundle\n  // @default none\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.fileExt != null) { -%>\n  \"fileExt\": \"<%= it.options.fileExt %>\",\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.overwrite != null) { -%>\n  // overwrite each index.ts file\n  // @mode create, bundle\n  // @default false\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.overwrite != null) { -%>\n  \"overwrite\": <%= it.options.overwrite %>,\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.backup != null) { -%>\n  // Create a backup file if the \\`index.ts\\` file already exists. \n  // This option only works if the \\`overwrite\\` option is enabled.\n  //\n  // @mode create, bundle\n  // @defulat true\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.backup != null) { -%>\n  \"backup\": <%= it.options.backup %>,\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.generationStyle != null) { -%>\n  // When generating the \\`index.ts\\` file, decide how you want to generate it\n  //\n  // @mode create, bundle\n  // @default auto\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.generationStyle != null) { -%>\n  \"generationStyle\": \"<%= it.options.generationStyle %>\",\n  <%- } -%>\n\n  <%- if (it.isComment && it.options.include != null) { -%>\n  // A list of files to use when generating the index.ts file. If no value is set,\n  // the value of the include setting set in the tsconfig.json file will be used\n  //\n  // @mode create, bundle\n  <%- } -%>\n  <%- if (it.options.include != null) { -%>\n  \"include\": <%= it.options.include %>,\n  <%- } -%>\n\n  <%- if (it.isComment && it.options.exclude != null) { -%>\n  // A list of files to exclude when generating the index.ts file. If no value is set,\n  // the value of the exclude setting set in the tsconfig.json file is used\n  //\n  // @mode create, bundle\n  <%- } -%>\n  <%- if (it.options.exclude != null) { -%>\n  \"exclude\": <%= it.options.exclude %>,\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.skipEmptyDir != null) { -%>\n  // If \\`skipEmptyDir\\` is set to true, an empty directory with no files will not create an \\`index.ts\\` file\n  //\n  // @mode create\n  // @default true\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.skipEmptyDir != null) { -%>\n  \"skipEmptyDir\": <%= it.options.skipEmptyDir %>,\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.startFrom != null) { -%>\n  // Specify the starting directory to start creating the \\`index.ts\\` file\n  //\n  // @mode create\n  // @default tsconfig.json file directory\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.startFrom != null) { -%>\n  \"startFrom\": <%= it.options.startFrom %>,\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.output != null) { -%>\n  // Output directory. Default value is same project directory\n  // @mode bundle\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.output != null) { -%>\n  \"output\": \"<%= it.options.output %>\",\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.removeBackup != null) { -%>\n  // remove with backup file\n  // @mode remove\n  // @default false\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.removeBackup != null) { -%>\n  \"removeBackup\": <%= it.options.removeBackup %>,\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.options.forceYes != null) { -%>\n  // answer \\`yes\\` to all questions\n  // @mode remove\n  // @default false\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.options.forceYes != null) { -%>\n  \"forceYes\": <%= it.options.forceYes %>,\n  <%- } -%>\n}\n`;\n", "export const optionDefaultTemplate = `\n{\n  <%- if (it.addEveryOptions && it.isComment && it.spinnerStream != null) { -%>\n  // Stream of cli spinner, you can pass stdout or stderr\n  //\n  // @mode all\n  // @default stdout\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.spinnerStream != null) { -%>\n  \"spinnerStream\": \"<%= it.spinnerStream %>\",\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.progressStream) { -%>\n  // Stream of cli progress, you can pass stdout or stderr\n  //\n  // @mode all\n  // @default stdout\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.progressStream != null) { -%>\n  \"progressStream\": \"<%= it.progressStream %>\",\n  <%- } -%>\n\n  <%- if (it.addEveryOptions && it.isComment && it.reasonerStream != null) { -%>\n  // Stream of cli reasoner. Reasoner show name conflict error and already exist index.ts file error.\n  // You can pass stdout or stderr\n  //\n  // @mode all\n  // @default stderr\n  <%- } -%>\n  <%- if (it.addEveryOptions && it.reasonerStream != null) { -%>\n  \"reasonerStream\": \"<%= it.reasonerStream %>\",\n  <%- } -%>\n\n  \"options\": [<%= it.options %>]\n}\n`;\n", "import { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\nimport { addExt } from '#/modules/path/addExt';\nimport { posixJoin } from '#/modules/path/modules/posixJoin';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { CE_TEMPLATE_NAME } from '#/templates/const-enum/CE_TEMPLATE_NAME';\nimport { declarationFileTemplate } from '#/templates/templates/declarationFileTemplate';\nimport { defaultAliasNamedDestructiveDefaultTemplate } from '#/templates/templates/defaultAliasNamedDestructiveDefaultTemplate';\nimport { defaultAliasNamedStarDefaultTemplate } from '#/templates/templates/defaultAliasNamedStarDefaultTemplate';\nimport { defaultNonAliasNamedDestructiveDefaultTemplate } from '#/templates/templates/defaultNonAliasNamedDestructiveDefaultTemplate';\nimport { defaultStarNamedDestructiveDefaultTemplate } from '#/templates/templates/defaultStarNamedDestructiveDefaultTemplate';\nimport { defaultStarNamedStarDefaultTemplate } from '#/templates/templates/defaultStarNamedStarDefaultTemplate';\nimport { indexFileDefaultTemplate } from '#/templates/templates/indexFileDefaultTemplate';\nimport { moduleIndexFileDefaultTemplate } from '#/templates/templates/moduleIndexFileDefaultTemplate';\nimport { nestedOptionDefaultTemplate } from '#/templates/templates/nestedOptionDefaultTemplate';\nimport { optionDefaultTemplate } from '#/templates/templates/optionDefaultTemplate';\nimport consola from 'consola';\nimport { Eta } from 'eta';\nimport { isError } from 'my-easy-fp';\nimport fs from 'node:fs';\n\nexport class TemplateContainer {\n  static #it: TemplateContainer;\n\n  static get it(): TemplateContainer {\n    return TemplateContainer.#it;\n  }\n\n  static #isBootstrap: boolean = false;\n\n  static get isBootstrap(): boolean {\n    return TemplateContainer.#isBootstrap;\n  }\n\n  static getDefaultTemplate() {\n    return new Map<string, string>([\n      [CE_TEMPLATE_NAME.DECLARATION_FILE_TEMPLATE, declarationFileTemplate.trim()],\n      [CE_TEMPLATE_NAME.MODULE_INDEX_FILE_TEMPLATE, moduleIndexFileDefaultTemplate.trim()],\n      [CE_TEMPLATE_NAME.INDEX_FILE_TEMPLATE, indexFileDefaultTemplate.trim()],\n      [CE_TEMPLATE_NAME.OPTIONS_TEMPLATE, optionDefaultTemplate.trim()],\n      [CE_TEMPLATE_NAME.NESTED_OPTIONS_TEMPLATE, nestedOptionDefaultTemplate.trim()],\n      [CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_STAR, defaultAliasNamedStarDefaultTemplate.trim()],\n      [\n        CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_DESTRUCTIVE,\n        defaultAliasNamedDestructiveDefaultTemplate.trim(),\n      ],\n      [\n        CE_GENERATION_STYLE.DEFAULT_NON_ALIAS_NAMED_DESTRUCTIVE,\n        defaultNonAliasNamedDestructiveDefaultTemplate.trim(),\n      ],\n      [CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR, defaultStarNamedStarDefaultTemplate.trim()],\n      [\n        CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_DESTRUCTIVE,\n        defaultStarNamedDestructiveDefaultTemplate.trim(),\n      ],\n    ]);\n  }\n\n  static async load(templatePath?: string) {\n    if (templatePath == null) {\n      return TemplateContainer.getDefaultTemplate();\n    }\n\n    const resolvedTemplateFilePath = posixResolve(templatePath);\n    const templates = await TemplateContainer.readFiles(resolvedTemplateFilePath);\n\n    return new Map<string, string>([\n      [CE_TEMPLATE_NAME.INDEX_FILE_TEMPLATE, templates.indexFile],\n      [CE_TEMPLATE_NAME.OPTIONS_TEMPLATE, templates.options],\n      [CE_TEMPLATE_NAME.NESTED_OPTIONS_TEMPLATE, templates.nestedOptions],\n      [CE_TEMPLATE_NAME.MODULE_INDEX_FILE_TEMPLATE, templates.moduleIndexFile],\n      [CE_TEMPLATE_NAME.DECLARATION_FILE_TEMPLATE, templates.declarationFile],\n      [CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_DESTRUCTIVE, templates.defaultAliasNamedDestructive],\n      [\n        CE_GENERATION_STYLE.DEFAULT_NON_ALIAS_NAMED_DESTRUCTIVE,\n        templates.defaultNonAliasNamedDestructive,\n      ],\n      [CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR, templates.defaultStarNamedStar],\n      [CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_STAR, templates.defaultAliasNamedStar],\n      [CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_DESTRUCTIVE, templates.defaultStarNamedDestructive],\n    ]);\n  }\n\n  static async bootstrap(templatePath?: string) {\n    if (TemplateContainer.#isBootstrap) {\n      return;\n    }\n\n    const templates = await TemplateContainer.load(templatePath);\n\n    TemplateContainer.#it = new TemplateContainer({ templatePath, templates });\n    TemplateContainer.#isBootstrap = true;\n  }\n\n  static getTemplateFileNames(basePath: string, templateName: string): string {\n    return posixJoin(basePath, addExt(templateName, 'eta'));\n  }\n\n  static async readFiles(basePath: string) {\n    const n = (t: string) => TemplateContainer.getTemplateFileNames(basePath, t);\n\n    const buffers = await Promise.all([\n      fs.promises.readFile(n(CE_TEMPLATE_NAME.INDEX_FILE_TEMPLATE)),\n      fs.promises.readFile(n(CE_TEMPLATE_NAME.OPTIONS_TEMPLATE)),\n      fs.promises.readFile(n(CE_TEMPLATE_NAME.NESTED_OPTIONS_TEMPLATE)),\n      fs.promises.readFile(n(CE_TEMPLATE_NAME.MODULE_INDEX_FILE_TEMPLATE)),\n      fs.promises.readFile(n(CE_TEMPLATE_NAME.DECLARATION_FILE_TEMPLATE)),\n      fs.promises.readFile(n(CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_STAR)),\n      fs.promises.readFile(n(CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_DESTRUCTIVE)),\n      fs.promises.readFile(n(CE_GENERATION_STYLE.DEFAULT_NON_ALIAS_NAMED_DESTRUCTIVE)),\n      fs.promises.readFile(n(CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR)),\n      fs.promises.readFile(n(CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_DESTRUCTIVE)),\n    ]);\n\n    const [\n      indexFile,\n      options,\n      nestedOptions,\n      moduleIndexFile,\n      declarationFile,\n      defaultAliasNamedStar,\n      defaultAliasNamedDestructive,\n      defaultNonAliasNamedDestructive,\n      defaultStarNamedStar,\n      defaultStarNamedDestructive,\n    ] = buffers.map((buffer) => buffer.toString().trim());\n\n    return {\n      indexFile,\n      options,\n      nestedOptions,\n      moduleIndexFile,\n      declarationFile,\n      defaultAliasNamedStar,\n      defaultAliasNamedDestructive,\n      defaultNonAliasNamedDestructive,\n      defaultStarNamedStar,\n      defaultStarNamedDestructive,\n    };\n  }\n\n  static async evaluate<T extends object>(\n    name: string,\n    data: T,\n    option?: ConstructorParameters<typeof Eta>[0],\n  ) {\n    try {\n      if (!TemplateContainer.#isBootstrap) {\n        throw new Error('NOT_INITIALIZE_ERROR: please, initialize before use');\n      }\n\n      const rendered = await TemplateContainer.it.evaluate(name, data, option);\n      return rendered;\n    } catch (caught) {\n      const err = isError(caught, new Error('raise error from evaluateTemplate'));\n      consola.error(`template: ${name}`, data);\n      consola.error(err);\n\n      throw err;\n    }\n  }\n\n  #templatePath?: string;\n\n  #templates: Map<string, string>;\n\n  #eta: Eta;\n\n  constructor(args: { templatePath?: string; templates: Map<string, string> }) {\n    this.#templatePath = args.templatePath;\n    this.#templates = args.templates;\n\n    this.#eta = new Eta({ views: 'ctix', autoEscape: false, rmWhitespace: true });\n    this.#eta.resolvePath = this.etaResolvePath.bind(this);\n    this.#eta.readFile = this.etaReadFile.bind(this);\n  }\n\n  get templatePath() {\n    return this.#templatePath;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  etaResolvePath(templatePath: string) {\n    return templatePath;\n  }\n\n  etaReadFile(templatePath: string) {\n    return this.#templates.get(templatePath) ?? defaultStarNamedStarDefaultTemplate.trim();\n  }\n\n  async evaluate<T extends object>(\n    name: string,\n    data: T,\n    option?: ConstructorParameters<typeof Eta>[0],\n  ) {\n    try {\n      if (this.#templates.get(name) == null) {\n        throw new Error(`cannot found template: ${name}`);\n      }\n\n      if (option != null) {\n        const rendered = this.#eta.withConfig(option).render(name, data);\n        return rendered;\n      }\n\n      const rendered = this.#eta.render(name, data);\n      return rendered;\n    } catch (caught) {\n      const err = isError(caught, new Error('raise error from evaluateTemplate'));\n      consola.error(`template: ${name}`, data);\n      consola.error(err);\n\n      throw err;\n    }\n  }\n}\n", "import path from 'node:path';\n\nexport function addCurrentDirPrefix(filePath: string, sep?: string): string {\n  const pathSep = sep ?? path.posix.sep;\n\n  if (filePath.startsWith('.')) {\n    return filePath;\n  }\n\n  if (filePath === '') {\n    return `.${pathSep}`;\n  }\n\n  return `.${pathSep}${filePath}`;\n}\n", "export function getImportStatementRemoveExtname(extname: string): string {\n  switch (extname) {\n    // .js\n    case '.ts':\n      return '';\n\n    // .jsx\n    case '.tsx':\n    case '.jsx':\n      return '';\n\n    // declaration file not change extension\n    case '.d.ts':\n    case '.d.cts':\n    case '.d.mts':\n      return extname;\n\n    // .cjs\n    case '.cts':\n    case '.cjs':\n      return '';\n\n    // .mjs\n    case '.mts':\n    case '.mjs':\n      return '';\n\n    // other case: .js\n    default:\n      return '';\n  }\n}\n", "export function getImportStatementReplaceJs(extname: string): string {\n  switch (extname) {\n    // .js\n    case '.ts':\n      return '.js';\n\n    // .jsx\n    case '.tsx':\n    case '.jsx':\n      return '.jsx';\n\n    // declaration file not change extension\n    case '.d.ts':\n    case '.d.cts':\n    case '.d.mts':\n      return extname;\n\n    // .cjs\n    case '.cts':\n    case '.cjs':\n      return '.cjs';\n\n    // .mjs\n    case '.mts':\n    case '.mjs':\n      return '.mjs';\n\n    // other case\n    default:\n      return extname;\n  }\n}\n", "import { CE_EXTENSION_PROCESSING } from '#/configs/const-enum/CE_EXTENSION_PROCESSING';\nimport { getImportStatementRemoveExtname } from '#/modules/path/getImportStatementRemoveExtname';\nimport { getImportStatementReplaceJs } from '#/modules/path/getImportStatementReplaceJs';\n\nexport function getImportStatementExtname(\n  option: CE_EXTENSION_PROCESSING,\n  extname: string,\n): string {\n  switch (option) {\n    case CE_EXTENSION_PROCESSING.KEEP_EXTENSION:\n      return extname;\n    case CE_EXTENSION_PROCESSING.REPLACE_JS:\n      return getImportStatementReplaceJs(extname);\n    default:\n      return getImportStatementRemoveExtname(extname);\n  }\n}\n", "import type { getInlineCommentedFiles } from '#/comments/getInlineCommentedFiles';\nimport type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport { addCurrentDirPrefix } from '#/modules/path/addCurrentDirPrefix';\nimport { getExtname } from '#/modules/path/getExtname';\nimport { getImportStatementExtname } from '#/modules/path/getImportStatementExtname';\nimport { posixRelative } from '#/modules/path/modules/posixRelative';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport pathe from 'pathe';\nimport type { SetOptional } from 'type-fest';\n\nexport function getInlineDeclarationRenderData(\n  declarations: ReturnType<typeof getInlineCommentedFiles>,\n  options: SetOptional<Pick<TBundleOptions, 'output' | 'fileExt'>, 'output'>,\n) {\n  const renderDatas = declarations.map((declaration) => {\n    const extname = getExtname(declaration.filePath);\n    const renderExtname = getImportStatementExtname(options.fileExt, extname);\n    const dirname = pathe.dirname(declaration.filePath);\n    const basename = pathe.basename(declaration.filePath, extname);\n\n    const importPath =\n      options.output != null\n        ? addCurrentDirPrefix(posixRelative(options.output, pathe.join(dirname, basename)))\n        : replaceSepToPosix(`.${path.posix.sep}${pathe.join(dirname, basename)}`);\n\n    return {\n      ...declaration,\n      importPath,\n      extname: {\n        origin: extname,\n        render: renderExtname,\n      },\n    };\n  });\n\n  return renderDatas;\n}\n", "import type { IExportStatement } from '#/compilers/interfaces/IExportStatement';\nimport type { IModeBundleOptions } from '#/configs/interfaces/IModeBundleOptions';\nimport type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\nimport type { IModeTsGenerateOptions } from '#/configs/interfaces/IModeTsGenerateOptions';\nimport { addCurrentDirPrefix } from '#/modules/path/addCurrentDirPrefix';\nimport { getExtname } from '#/modules/path/getExtname';\nimport { getImportStatementExtname } from '#/modules/path/getImportStatementExtname';\nimport { posixRelative } from '#/modules/path/modules/posixRelative';\nimport type { IIndexRenderData } from '#/templates/interfaces/IIndexRenderData';\nimport { basenames, replaceSepToPosix } from 'my-node-fp';\nimport path from 'node:path';\n\nexport function getRenderData(\n  option: Pick<\n    IModeGenerateOptions & IModeTsGenerateOptions & IModeBundleOptions,\n    'fileExt' | 'quote' | 'useSemicolon'\n  >,\n  filePath: string,\n  statements: IExportStatement[],\n  output?: string,\n): IIndexRenderData | undefined {\n  const included = statements.filter((statement) => !statement.isExcluded);\n\n  if (included.length <= 0) {\n    return undefined;\n  }\n\n  const isHasPartialExclude = statements.length !== included.length;\n  const defaultExport = included.find((statement) => !statement.isExcluded && statement.isDefault);\n  const extname = getExtname(filePath);\n  const renderExtname = getImportStatementExtname(option.fileExt, extname);\n  const filename = filePath.replace(new RegExp(`${extname}$`), '');\n  const relativePath =\n    output != null\n      ? addCurrentDirPrefix(posixRelative(output, filename))\n      : replaceSepToPosix(`.${path.posix.sep}${basenames(filename, getExtname(filePath))}`);\n\n  return {\n    options: {\n      quote: option.quote,\n      useSemicolon: option.useSemicolon,\n    },\n    filePath,\n    statement: {\n      extname: {\n        origin: extname,\n        render: renderExtname,\n      },\n      importPath: relativePath,\n      isHasDefault: defaultExport != null,\n      isHasPartialExclude,\n      default: defaultExport,\n      named: statements.filter((statement) => !statement.isExcluded && !statement.isDefault),\n    },\n  } satisfies IIndexRenderData;\n}\n", "export const CE_AUTO_RENDER_CASE = {\n  // case 01.\n  // default export (o)\n  // named export   (o)\n  // partial exclude (x)\n  DEFAULT_NAMED: 1,\n\n  // case 02.\n  // default export (o)\n  // named export   (x)\n  // partial exclude (x)\n  DEFAULT: 2,\n\n  // case 03.\n  // default export (x)\n  // named export   (o)\n  // partial exclude (x)\n  NAMED: 3,\n\n  // case 04.\n  // default export (x)\n  // named export   (o)\n  // partial exclude (o)\n  //\n  // - partial exclude apply on default export\n  // - partial exclude apply on named export and dosen't have a default export\n  NAMED_PARTAL: 4,\n\n  // case 05.\n  // default export (o)\n  // named export   (x)\n  // partial exclude (o)\n  //\n  // - partial exclude apply on named export\n  // - named export item only one\n  DEFAULT_PARTIAL: 5,\n\n  // case 06.\n  // default export (o)\n  // named export   (o)\n  // partial exclude (o)\n  //\n  // - partial exclude apply on named export\n  // - named export item more then one\n  DEFAULT_NAMED_PARTIAL: 6,\n\n  // unknown\n  UNKNOWN: Number.MAX_SAFE_INTEGER,\n} as const;\n\nexport type CE_AUTO_RENDER_CASE = (typeof CE_AUTO_RENDER_CASE)[keyof typeof CE_AUTO_RENDER_CASE];\n", "import { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\nimport { CE_AUTO_RENDER_CASE } from '#/templates/const-enum/CE_AUTO_RENDER_CASE';\nimport type { IIndexRenderData } from '#/templates/interfaces/IIndexRenderData';\n\nexport function getAutoRenderCase(renderData: IIndexRenderData): {\n  case: CE_AUTO_RENDER_CASE;\n  style: CE_GENERATION_STYLE;\n} {\n  // case 01.\n  // default export (o)\n  // named export   (o)\n  // partial exclude (x)\n  if (\n    renderData.statement.isHasDefault &&\n    renderData.statement.named.length > 0 &&\n    !renderData.statement.isHasPartialExclude\n  ) {\n    return {\n      case: CE_AUTO_RENDER_CASE.DEFAULT_NAMED,\n      style: CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR,\n    };\n  }\n\n  // case 02.\n  // default export (o)\n  // named export   (x)\n  // partial exclude (x)\n  if (\n    renderData.statement.isHasDefault &&\n    renderData.statement.named.length <= 0 &&\n    !renderData.statement.isHasPartialExclude\n  ) {\n    return {\n      case: CE_AUTO_RENDER_CASE.DEFAULT,\n      style: CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR,\n    };\n  }\n\n  // case 03.\n  // default export (x)\n  // named export   (o)\n  // partial exclude (x)\n  if (\n    !renderData.statement.isHasDefault &&\n    renderData.statement.named.length > 0 &&\n    !renderData.statement.isHasPartialExclude\n  ) {\n    return {\n      case: CE_AUTO_RENDER_CASE.NAMED,\n      style: CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR,\n    };\n  }\n\n  // case 04.\n  // default export (x)\n  // named export   (o)\n  // partial exclude (o)\n  //\n  // - partial exclude apply on default export\n  // - partial exclude apply on named export and dosen't have a default export\n  if (\n    !renderData.statement.isHasDefault &&\n    renderData.statement.named.length > 0 &&\n    renderData.statement.isHasPartialExclude\n  ) {\n    return {\n      case: CE_AUTO_RENDER_CASE.NAMED_PARTAL,\n      style: CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_DESTRUCTIVE,\n    };\n  }\n\n  // case 05.\n  // default export (o)\n  // named export   (x)\n  // partial exclude (o)\n  //\n  // - partial exclude apply on named export\n  // - named export item only one\n  if (\n    renderData.statement.isHasDefault &&\n    renderData.statement.named.length <= 0 &&\n    renderData.statement.isHasPartialExclude\n  ) {\n    // \uC774 \uBC29\uC2DD\uC73C\uB85C \uB418\uC5B4 \uC788\uC744 \uB54C\uB294 \uACBD\uACE0\uAC00 \uD544\uC694\uD558\uB2E4, rollup-plugin-dts\uC5D0\uC11C\uB294 \uC774 \uBC29\uC2DD\uC778 \uACBD\uC6B0,\n    // default export\uB97C 2\uBC88 \uB0B4\uBCF4\uB0B4\uC11C \uC624\uB958\uAC00 \uBC1C\uC0DD\uD55C\uB2E4.\n    return {\n      case: CE_AUTO_RENDER_CASE.DEFAULT_PARTIAL,\n      style: CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_STAR,\n    };\n  }\n\n  // case 06.\n  // default export (o)\n  // named export   (o)\n  // partial exclude (o)\n  //\n  // - partial exclude apply on named export\n  // - named export item more then one\n  if (\n    renderData.statement.isHasDefault &&\n    renderData.statement.named.length > 0 &&\n    renderData.statement.isHasPartialExclude\n  ) {\n    // \uC774 \uBC29\uC2DD\uC73C\uB85C \uB418\uC5B4 \uC788\uC744 \uB54C\uB294 \uACBD\uACE0\uAC00 \uD544\uC694\uD558\uB2E4, rollup-plugin-dts\uC5D0\uC11C\uB294 \uC774 \uBC29\uC2DD\uC778 \uACBD\uC6B0,\n    // default export\uB97C 2\uBC88 \uB0B4\uBCF4\uB0B4\uC11C \uC624\uB958\uAC00 \uBC1C\uC0DD\uD55C\uB2E4.\n    return {\n      case: CE_AUTO_RENDER_CASE.DEFAULT_PARTIAL,\n      style: CE_GENERATION_STYLE.DEFAULT_ALIAS_NAMED_DESTRUCTIVE,\n    };\n  }\n\n  // case 07.\n  // unknown case\n  return {\n    case: CE_AUTO_RENDER_CASE.UNKNOWN,\n    style: CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR,\n  };\n}\n", "import { CE_INLINE_COMMENT_KEYWORD } from '#/comments/const-enum/CE_INLINE_COMMENT_KEYWORD';\nimport { getInlineStyle } from '#/comments/getInlineStyle';\nimport type { IStatementComments } from '#/comments/interfaces/IStatementComments';\nimport { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\nimport { CE_AUTO_RENDER_CASE } from '#/templates/const-enum/CE_AUTO_RENDER_CASE';\nimport type { IIndexRenderData } from '#/templates/interfaces/IIndexRenderData';\nimport { getAutoRenderCase } from '#/templates/modules/getAutoRenderCase';\n\nexport function getSelectStyle(params: {\n  comment?: IStatementComments;\n  options: { style: CE_GENERATION_STYLE };\n  renderData: IIndexRenderData;\n}): ReturnType<typeof getAutoRenderCase> {\n  if (params.comment != null) {\n    const style = getInlineStyle({\n      comment: params.comment,\n      options: {\n        keyword: CE_INLINE_COMMENT_KEYWORD.FILE_GENERATION_STYLE_KEYWORD,\n      },\n    });\n\n    if (style != null) {\n      return {\n        case: CE_AUTO_RENDER_CASE.UNKNOWN,\n        style: style?.style,\n      };\n    }\n  }\n\n  if (params.options.style === CE_GENERATION_STYLE.AUTO) {\n    return getAutoRenderCase(params.renderData);\n  }\n\n  return {\n    case: CE_AUTO_RENDER_CASE.UNKNOWN,\n    style: params.options.style,\n  };\n}\n", "import { ProgressBar } from '#/cli/ux/ProgressBar';\nimport { Reasoner } from '#/cli/ux/Reasoner';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport { CE_INLINE_COMMENT_KEYWORD } from '#/comments/const-enum/CE_INLINE_COMMENT_KEYWORD';\nimport { getInlineCommentedFiles } from '#/comments/getInlineCommentedFiles';\nimport { getSourceFileComments } from '#/comments/getSourceFileComments';\nimport type { ISourceFileComments } from '#/comments/interfaces/ISourceFileComments';\nimport { StatementTable } from '#/compilers/StatementTable';\nimport { getExportStatement } from '#/compilers/getExportStatement';\nimport type { IExportStatement } from '#/compilers/interfaces/IExportStatement';\nimport { isDeclarationFile } from '#/compilers/isDeclarationFile';\nimport { getExtendOptions } from '#/configs/getExtendOptions';\nimport type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCommandBuildOptions } from '#/configs/interfaces/TCommandBuildOptions';\nimport { ProjectContainer } from '#/modules/file/ProjectContainer';\nimport { checkOutputFile } from '#/modules/file/checkOutputFile';\nimport { getTsExcludeFiles } from '#/modules/file/getTsExcludeFiles';\nimport { getTsIncludeFiles } from '#/modules/file/getTsIncludeFiles';\nimport { posixJoin } from '#/modules/path/modules/posixJoin';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { ExcludeContainer } from '#/modules/scope/ExcludeContainer';\nimport { IncludeContainer } from '#/modules/scope/IncludeContainer';\nimport { getBanner } from '#/modules/writes/getBanner';\nimport { indexWrites } from '#/modules/writes/indexWrites';\nimport { CE_TEMPLATE_NAME } from '#/templates/const-enum/CE_TEMPLATE_NAME';\nimport type { IIndexFileWriteParams } from '#/templates/interfaces/IIndexFileWriteParams';\nimport type { IIndexRenderData } from '#/templates/interfaces/IIndexRenderData';\nimport { TemplateContainer } from '#/templates/modules/TemplateContainer';\nimport { getInlineDeclarationRenderData } from '#/templates/modules/getInlineDeclarationRenderData';\nimport { getRenderData } from '#/templates/modules/getRenderData';\nimport { getSelectStyle } from '#/templates/modules/getSelectStyle';\nimport chalk from 'chalk';\nimport dayjs from 'dayjs';\nimport type * as tsm from 'ts-morph';\n\nexport async function bundling(buildOptions: TCommandBuildOptions, bundleOption: TBundleOptions) {\n  Spinner.it.start(\"ctix 'bundle' mode start, ...\");\n\n  if (\n    'from' in buildOptions &&\n    buildOptions.from &&\n    typeof buildOptions.from === 'string' &&\n    buildOptions.from !== 'none'\n  ) {\n    Spinner.it.succeed(`ctix 'bundle' mode configuration reading from '${buildOptions.from}'`);\n  }\n\n  await TemplateContainer.bootstrap();\n\n  const extendOptions = await getExtendOptions(bundleOption.project);\n  const project = ProjectContainer.project(bundleOption.project);\n\n  Spinner.it.succeed(`[${bundleOption.project}] loading compelete!`);\n  Spinner.it.update('include, exclude config');\n\n  const output = posixResolve(posixJoin(bundleOption.output, bundleOption.exportFilename));\n  const filePaths = project\n    .getSourceFiles()\n    .map((sourceFile) => sourceFile.getFilePath().toString());\n\n  const include = new IncludeContainer({\n    config: { include: getTsIncludeFiles({ config: bundleOption, extend: extendOptions }) },\n    cwd: extendOptions.resolved.projectDirPath,\n  });\n\n  const inlineExcludeds = getInlineCommentedFiles({\n    project,\n    filePaths,\n    keyword: CE_INLINE_COMMENT_KEYWORD.FILE_EXCLUDE_KEYWORD,\n  });\n\n  /**\n   * SourceCode\uB97C \uC77D\uC5B4\uC11C inline file exclude \uB41C \uD30C\uC77C\uC744 \uBCC4\uB3C4\uB85C \uC804\uB2EC\uD55C\uB2E4. \uC774\uB807\uAC8C \uD558\uB294 \uC774\uC720\uB294, \uC774 \uD30C\uC77C\uC740 \uC65C \uD3EC\uD568\uB418\uC9C0\n   * \uC54A\uC558\uC9C0? \uB77C\uB294 \uB4F1\uC758 \uB9AC\uD3EC\uD2B8\uB97C \uC0DD\uC131\uD560 \uB54C \uD55C \uACF3\uC5D0\uC11C \uC774 \uC815\uBCF4\uB97C \uB2E4 \uAD00\uB9AC\uD574\uC57C \uB9AC\uD3EC\uD2B8\uB97C \uC0DD\uC131\uD574\uC11C \uBCF4\uC5EC\uC904 \uC218 \uC788\uAE30 \uB54C\uBB38\uC774\uB2E4\n   */\n  const exclude = new ExcludeContainer({\n    config: {\n      exclude: [...getTsExcludeFiles({ config: bundleOption, extend: extendOptions }), ...[output]],\n    },\n    inlineExcludeds,\n    cwd: extendOptions.resolved.projectDirPath,\n  });\n\n  const inlineDeclarations = getInlineCommentedFiles({\n    project,\n    filePaths,\n    keyword: CE_INLINE_COMMENT_KEYWORD.FILE_DECLARATION_KEYWORD,\n  })\n    .filter((declaration) => !exclude.isExclude(declaration.filePath))\n    .filter((declaration) => {\n      const sourceFile = project.getSourceFile(declaration.filePath);\n      if (sourceFile == null) {\n        return false;\n      }\n\n      return isDeclarationFile(sourceFile);\n    });\n\n  const filenames = filePaths\n    .filter((filename) => include.isInclude(filename))\n    .filter((filename) => !exclude.isExclude(filename));\n\n  Spinner.it.succeed('analysis export statements completed!');\n  Spinner.it.stop();\n\n  if (filenames.length <= 0) {\n    Spinner.it.fail(\n      'Cannot find target files. Please add --include option or add include section in .ctirc file',\n    );\n    Spinner.it.stop();\n    return;\n  }\n\n  ProgressBar.it.head = '    file ';\n  ProgressBar.it.start(filenames.length, 0);\n\n  const statements = (\n    await Promise.all(\n      filenames\n        .map((filename) => project.getSourceFile(filename))\n        .filter((sourceFile): sourceFile is tsm.SourceFile => sourceFile != null)\n        .map(async (sourceFile) => {\n          const exportStatement = getExportStatement(sourceFile, bundleOption, extendOptions);\n          ProgressBar.it.increment();\n\n          return exportStatement;\n        }),\n    )\n  ).flat();\n\n  ProgressBar.it.stop();\n\n  const statementMap = new Map<string, IExportStatement[]>();\n  const statementTable = new StatementTable();\n\n  statementTable.inserts(statements);\n\n  Spinner.it.start(`build ${`\"${chalk.green(bundleOption.exportFilename)}\"`} file start`);\n\n  statements\n    .filter((statement) => !statementTable.isDuplicate(statement))\n    .forEach((statement) => {\n      const filePath = posixJoin(statement.path.dirPath, statement.path.filename);\n      const accessed = statementMap.get(filePath);\n\n      if (accessed == null) {\n        statementMap.set(filePath, [statement]);\n      } else {\n        accessed.push(statement);\n        statementMap.set(filePath, accessed);\n      }\n    });\n\n  const commentMap = new Map<string, ISourceFileComments>(\n    Array.from(statementMap.keys())\n      .map((filePath) => {\n        const sourceFile = project.getSourceFile(filePath);\n\n        if (sourceFile != null) {\n          const comments = getSourceFileComments(sourceFile);\n          return [filePath, comments];\n        }\n\n        return undefined;\n      })\n      .filter((comment): comment is [string, ISourceFileComments] => comment != null),\n  );\n\n  Spinner.it.stop();\n  ProgressBar.it.head = '  export ';\n  ProgressBar.it.start(statements.length, 0);\n\n  const datas = Array.from(statementMap.entries())\n    .map(([filePath, exportStatements]) => {\n      const data = getRenderData(bundleOption, filePath, exportStatements, bundleOption.output);\n      return data;\n    })\n    .filter((renderData): renderData is IIndexRenderData => renderData != null)\n    .map((renderData) => {\n      const comment = commentMap.get(renderData.filePath)?.comments.at(0);\n      const style = getSelectStyle({\n        comment,\n        options: { style: bundleOption.generationStyle },\n        renderData,\n      });\n\n      ProgressBar.it.increment();\n\n      return { renderData, ...style };\n    });\n\n  const inlineDeclarationsRendered = await TemplateContainer.evaluate(\n    CE_TEMPLATE_NAME.DECLARATION_FILE_TEMPLATE,\n    {\n      options: { quote: bundleOption.quote, useSemicolon: bundleOption.useSemicolon },\n      declarations: getInlineDeclarationRenderData(inlineDeclarations, bundleOption),\n    },\n  );\n\n  const exportsRendered = (\n    await Promise.all(\n      datas.map(async (data) => {\n        const evaluated = await TemplateContainer.evaluate(data.style, data.renderData);\n        return evaluated;\n      }),\n    )\n  ).filter((line): line is string => line != null);\n\n  ProgressBar.it.stop();\n  Spinner.it.start('output file exists check, ...');\n\n  const outputMap = new Map<string, string>();\n  outputMap.set(output, [inlineDeclarationsRendered, ...exportsRendered].join('\\n'));\n  const fileExistReason = await checkOutputFile(outputMap);\n\n  if (!bundleOption.overwrite && !bundleOption.backup && fileExistReason.length > 0) {\n    Spinner.it.fail(\"ctix 'bundle' mode incomplete ...\");\n    Reasoner.it.start([...fileExistReason, ...statementTable.getDuplicateReason()]);\n    return;\n  }\n\n  const indexFiles = await Promise.all(\n    Array.from(outputMap.entries())\n      .map(([filePath, fileContent]) => ({ filePath, fileContent }))\n      .map(async (file) => {\n        return {\n          path: file.filePath,\n          content: await TemplateContainer.evaluate(CE_TEMPLATE_NAME.INDEX_FILE_TEMPLATE, {\n            directive: bundleOption.directive,\n            banner: getBanner(bundleOption, dayjs()),\n            eol: extendOptions.eol,\n            content: file.fileContent,\n          } satisfies IIndexFileWriteParams),\n        };\n      }),\n  );\n\n  await indexWrites(indexFiles, bundleOption, extendOptions);\n\n  ProjectContainer.addSourceFilesAtPaths(bundleOption.project, Array.from(outputMap.keys()));\n\n  Spinner.it.succeed(`${output} file build completed!`);\n  Spinner.it.succeed(\"ctix 'bundle' mode completed!\");\n\n  Reasoner.it.start(statementTable.getDuplicateReason());\n}\n", "import { posixJoin } from '#/modules/path/modules/posixJoin';\nimport { populate } from 'my-easy-fp';\nimport { startSepAppend, startSepRemove } from 'my-node-fp';\nimport path from 'node:path';\n\nexport function getAllParentDir(parentDir: string, childDir: string): string[] {\n  const parent = startSepAppend(parentDir, path.posix.sep);\n  const child = startSepAppend(childDir, path.posix.sep);\n  const elements = startSepRemove(child.replace(parent, ''), path.posix.sep)\n    .split(path.posix.sep)\n    .slice(0, -1);\n\n  return [\n    parentDir,\n    ...populate(elements.length, true).map((index) => {\n      return posixJoin(parent, ...elements.slice(0, index));\n    }),\n  ];\n}\n", "import { posixJoin } from '#/modules/path/modules/posixJoin';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { isDirectory } from 'my-node-fp';\nimport fs from 'node:fs';\nimport { isPromise } from 'node:util/types';\n\nexport async function dfsWalk(\n  currentDirPath: string,\n  callback: (params: { dirPath: string; filePaths: string[] }) => void | Promise<void>,\n) {\n  const resolved = posixResolve(currentDirPath);\n  const readed = await fs.promises.readdir(resolved);\n\n  const dirPaths = (\n    await Promise.all(\n      readed.map(async (filePath) => {\n        if (await isDirectory(posixJoin(resolved, filePath))) {\n          return filePath;\n        }\n\n        return undefined;\n      }),\n    )\n  ).filter((dirPath): dirPath is string => dirPath != null);\n  const filePaths = readed.filter((filePath) => !dirPaths.includes(filePath));\n\n  const callbacked = callback({ dirPath: currentDirPath, filePaths });\n\n  if (isPromise(callbacked)) {\n    await callbacked;\n  }\n\n  await dirPaths.reduce(async (prevHandle, dirPath) => {\n    const handle = async () => {\n      await dfsWalk(posixJoin(resolved, dirPath), callback);\n    };\n\n    await prevHandle;\n\n    return handle();\n  }, Promise.resolve());\n}\n", "import { replaceSepToPosix } from 'my-node-fp';\nimport path from 'node:path';\n\nexport function getParentDir(rawDirPath: string): string | undefined {\n  const dirPath = replaceSepToPosix(rawDirPath);\n  const elements = dirPath.split(path.posix.sep);\n  const parentElements = elements.slice(0, -1);\n\n  if (parentElements.length === 1 && parentElements.at(0) === '') {\n    return '/';\n  }\n\n  if (parentElements.length <= 0) {\n    return undefined;\n  }\n\n  return parentElements.join(path.posix.sep);\n}\n", "import type { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\nimport type { IModeBundleOptions } from '#/configs/interfaces/IModeBundleOptions';\nimport type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\nimport type { IModeTsGenerateOptions } from '#/configs/interfaces/IModeTsGenerateOptions';\nimport type { CE_AUTO_RENDER_CASE } from '#/templates/const-enum/CE_AUTO_RENDER_CASE';\nimport type { IIndexRenderData } from '#/templates/interfaces/IIndexRenderData';\n\nexport function createRenderData(\n  renderCase: CE_AUTO_RENDER_CASE,\n  style: CE_GENERATION_STYLE,\n  option: Pick<\n    IModeGenerateOptions & IModeTsGenerateOptions & IModeBundleOptions,\n    'fileExt' | 'quote' | 'useSemicolon'\n  >,\n  filePath: string,\n  statement: IIndexRenderData['statement'],\n): {\n  case: CE_AUTO_RENDER_CASE;\n  style: CE_GENERATION_STYLE;\n  renderData: IIndexRenderData;\n} {\n  const renderData: IIndexRenderData = {\n    options: {\n      quote: option.quote,\n      useSemicolon: option.useSemicolon,\n    },\n    filePath,\n    statement,\n  };\n\n  const data: {\n    case: CE_AUTO_RENDER_CASE;\n    style: CE_GENERATION_STYLE;\n    renderData: IIndexRenderData;\n  } = {\n    case: renderCase,\n    style,\n    renderData,\n  };\n\n  return data;\n}\n", "import { ProgressBar } from '#/cli/ux/ProgressBar';\nimport { Reasoner } from '#/cli/ux/Reasoner';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport { CE_INLINE_COMMENT_KEYWORD } from '#/comments/const-enum/CE_INLINE_COMMENT_KEYWORD';\nimport { getInlineCommentedFiles } from '#/comments/getInlineCommentedFiles';\nimport { getInlineStyle } from '#/comments/getInlineStyle';\nimport { getOutputExcludedFiles } from '#/comments/getOutputExcludedFiles';\nimport { getSourceFileComments } from '#/comments/getSourceFileComments';\nimport type { ISourceFileComments } from '#/comments/interfaces/ISourceFileComments';\nimport { StatementTable } from '#/compilers/StatementTable';\nimport { getExportStatement } from '#/compilers/getExportStatement';\nimport type { IExportStatement } from '#/compilers/interfaces/IExportStatement';\nimport { CE_GENERATION_STYLE } from '#/configs/const-enum/CE_GENERATION_STYLE';\nimport { getExtendOptions } from '#/configs/getExtendOptions';\nimport type { TCommandBuildOptions } from '#/configs/interfaces/TCommandBuildOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport { getAllParentDir } from '#/modules//path/getAllParentDir';\nimport { ProjectContainer } from '#/modules/file/ProjectContainer';\nimport { checkOutputFile } from '#/modules/file/checkOutputFile';\nimport { getTsExcludeFiles } from '#/modules/file/getTsExcludeFiles';\nimport { getTsIncludeFiles } from '#/modules/file/getTsIncludeFiles';\nimport { dfsWalk } from '#/modules/file/walk';\nimport { addCurrentDirPrefix } from '#/modules/path/addCurrentDirPrefix';\nimport { getDepth } from '#/modules/path/getDepth';\nimport { getImportStatementExtname } from '#/modules/path/getImportStatementExtname';\nimport { getParentDir } from '#/modules/path/getParentDir';\nimport { posixJoin } from '#/modules/path/modules/posixJoin';\nimport { posixRelative } from '#/modules/path/modules/posixRelative';\nimport { ExcludeContainer } from '#/modules/scope/ExcludeContainer';\nimport { IncludeContainer } from '#/modules/scope/IncludeContainer';\nimport { getBanner } from '#/modules/writes/getBanner';\nimport { indexWrites } from '#/modules/writes/indexWrites';\nimport { CE_AUTO_RENDER_CASE } from '#/templates/const-enum/CE_AUTO_RENDER_CASE';\nimport { CE_TEMPLATE_NAME } from '#/templates/const-enum/CE_TEMPLATE_NAME';\nimport type { IIndexFileWriteParams } from '#/templates/interfaces/IIndexFileWriteParams';\nimport type { IIndexRenderData } from '#/templates/interfaces/IIndexRenderData';\nimport { TemplateContainer } from '#/templates/modules/TemplateContainer';\nimport { createRenderData } from '#/templates/modules/createRenderData';\nimport { getAutoRenderCase } from '#/templates/modules/getAutoRenderCase';\nimport { getRenderData } from '#/templates/modules/getRenderData';\nimport chalk from 'chalk';\nimport dayjs from 'dayjs';\nimport { getDirnameSync } from 'my-node-fp';\nimport type * as tsm from 'ts-morph';\n\nexport async function creating(_buildOptions: TCommandBuildOptions, createOption: TCreateOptions) {\n  Spinner.it.start(\"ctix 'create' mode start, ...\");\n\n  await TemplateContainer.bootstrap();\n  const extendOptions = await getExtendOptions(createOption.project);\n  const project = ProjectContainer.project(createOption.project);\n\n  Spinner.it.succeed(`${createOption.project} loading complete!`);\n  Spinner.it.update('include, exclude config');\n\n  const filePaths = project\n    .getSourceFiles()\n    .map((sourceFile) => sourceFile.getFilePath().toString());\n\n  const include = new IncludeContainer({\n    config: { include: getTsIncludeFiles({ config: createOption, extend: extendOptions }) },\n    cwd: extendOptions.resolved.projectDirPath,\n  });\n\n  const inlineExcludeds = getInlineCommentedFiles({\n    project,\n    filePaths,\n    keyword: CE_INLINE_COMMENT_KEYWORD.FILE_EXCLUDE_KEYWORD,\n  });\n\n  const outputExcludeds = await getOutputExcludedFiles({\n    project,\n    filePaths,\n    extendOptions,\n    exportFilename: createOption.exportFilename,\n  });\n\n  /**\n   * SourceCode\uB97C \uC77D\uC5B4\uC11C inline file exclude \uB41C \uD30C\uC77C\uC744 \uBCC4\uB3C4\uB85C \uC804\uB2EC\uD55C\uB2E4. \uC774\uB807\uAC8C \uD558\uB294 \uC774\uC720\uB294, \uC774 \uD30C\uC77C\uC740 \uC65C \uD3EC\uD568\uB418\uC9C0\n   * \uC54A\uC558\uC9C0? \uB77C\uB294 \uB4F1\uC758 \uB9AC\uD3EC\uD2B8\uB97C \uC0DD\uC131\uD560 \uB54C \uD55C \uACF3\uC5D0\uC11C \uC774 \uC815\uBCF4\uB97C \uB2E4 \uAD00\uB9AC\uD574\uC57C \uB9AC\uD3EC\uD2B8\uB97C \uC0DD\uC131\uD574\uC11C \uBCF4\uC5EC\uC904 \uC218 \uC788\uAE30 \uB54C\uBB38\uC774\uB2E4\n   */\n  const exclude = new ExcludeContainer({\n    config: {\n      exclude: [\n        ...getTsExcludeFiles({ config: createOption, extend: extendOptions }),\n        ...outputExcludeds,\n      ],\n    },\n    cwd: extendOptions.resolved.projectDirPath,\n    inlineExcludeds,\n  });\n\n  const filenames = filePaths\n    .filter((filename) => include.isInclude(filename))\n    .filter((filename) => !exclude.isExclude(filename));\n\n  Spinner.it.succeed('analysis export statements completed!');\n  Spinner.it.stop();\n\n  if (filenames.length <= 0) {\n    Spinner.it.fail(\n      'Cannot find target files. Please add --include option or add include section in .ctirc file',\n    );\n    Spinner.it.stop();\n    return;\n  }\n\n  ProgressBar.it.head = '    file ';\n  ProgressBar.it.start(filenames.length, 0);\n\n  const statements = (\n    await Promise.all(\n      filenames\n        .map((filename) => project.getSourceFile(filename))\n        .filter((sourceFile): sourceFile is tsm.SourceFile => sourceFile != null)\n        .map(async (sourceFile) => {\n          const statement = await getExportStatement(sourceFile, createOption, extendOptions);\n          return statement;\n        }),\n    )\n  ).flat();\n\n  ProgressBar.it.stop();\n\n  const filePathMap = new Map<string, IExportStatement[]>();\n  const dirPathMap = new Map<string, IExportStatement[]>();\n  const statementTable = new StatementTable();\n\n  statementTable.inserts(statements);\n\n  Spinner.it.start(`build ${`\"${chalk.green(createOption.exportFilename)}\"`} file start`);\n\n  statements\n    .filter((statement) => !statementTable.isDuplicate(statement))\n    .forEach((statement) => {\n      const filePath = posixJoin(statement.path.dirPath, statement.path.filename);\n      const filePathAccessed = filePathMap.get(filePath);\n\n      if (filePathAccessed == null) {\n        filePathMap.set(filePath, [statement]);\n      } else {\n        filePathAccessed.push(statement);\n        filePathMap.set(filePath, filePathAccessed);\n      }\n\n      const dirPathAccessed = dirPathMap.get(statement.path.dirPath);\n\n      if (dirPathAccessed == null) {\n        dirPathMap.set(statement.path.dirPath, [statement]);\n      } else {\n        dirPathAccessed.push(statement);\n        dirPathMap.set(statement.path.dirPath, dirPathAccessed);\n      }\n    });\n\n  const commentMap = new Map<string, ISourceFileComments>(\n    Array.from(filePathMap.keys())\n      .map((filePath) => {\n        const sourceFile = project.getSourceFile(filePath);\n\n        if (sourceFile != null) {\n          const comments = getSourceFileComments(sourceFile);\n          return [filePath, comments];\n        }\n\n        return undefined;\n      })\n      .filter((comment): comment is [string, ISourceFileComments] => comment != null),\n  );\n\n  Spinner.it.stop();\n  ProgressBar.it.head = '  export ';\n  ProgressBar.it.start(statements.length, 0);\n\n  const renderDataMap = new Map<\n    string,\n    { case: CE_AUTO_RENDER_CASE; style: CE_GENERATION_STYLE; renderData: IIndexRenderData }[]\n  >();\n\n  Array.from(filePathMap.entries())\n    .map(([filePath, exportStatements]) => getRenderData(createOption, filePath, exportStatements))\n    .filter((renderData): renderData is IIndexRenderData => renderData != null)\n    .map((renderData) => {\n      const comment = commentMap.get(renderData.filePath)?.comments.at(0);\n      const styleInfo =\n        comment != null\n          ? getInlineStyle({\n              comment,\n              options: {\n                keyword: CE_INLINE_COMMENT_KEYWORD.FILE_GENERATION_STYLE_KEYWORD,\n              },\n            })\n          : undefined;\n\n      const style =\n        styleInfo?.style ?? createOption.generationStyle === CE_GENERATION_STYLE.AUTO\n          ? getAutoRenderCase(renderData)\n          : ({\n              case: CE_AUTO_RENDER_CASE.UNKNOWN,\n              style: createOption.generationStyle,\n            } satisfies ReturnType<typeof getAutoRenderCase>);\n\n      return { renderData, ...style };\n    })\n    .forEach((data) => {\n      const key = getDirnameSync(data.renderData.filePath);\n      const prev = renderDataMap.get(key);\n\n      if (prev == null) {\n        renderDataMap.set(key, [data]);\n      } else {\n        renderDataMap.set(key, [...prev, data]);\n      }\n\n      ProgressBar.it.increment();\n    });\n\n  await dfsWalk(createOption.startFrom, (params) => {\n    // \uC0C1\uC704 \uB514\uB809\uD130\uB9AC\uC5D0 \uD558\uC704 \uB514\uB809\uD130\uB9AC \uC815\uBCF4\uB97C \uCD94\uAC00\uD558\uB294 \uC791\uC5C5\uC774\uAE30 \uB54C\uBB38\uC5D0, \uCD5C\uC0C1\uC704 \uB514\uB809\uD130\uB9AC\uB294 \uBCC4\uB3C4\uC758 \uC791\uC5C5\uC774 \uD544\uC694\uC5C6\uB2E4\n    // Since we're adding subdirectory information to a parent directory,\n    // the top-level directory doesn't need to do anything.\n    if (createOption.startFrom === params.dirPath) {\n      return;\n    }\n\n    const parentDir = getParentDir(params.dirPath);\n\n    if (parentDir == null) {\n      return;\n    }\n\n    if (createOption.skipEmptyDir) {\n      if ((dirPathMap.get(params.dirPath) ?? []).length <= 0) {\n        return;\n      }\n\n      const parentDirs = getAllParentDir(createOption.startFrom, params.dirPath);\n      const firstExistDir = parentDirs\n        .sort((l, r) => getDepth(r) - getDepth(l))\n        .find((dir) => {\n          if ((dirPathMap.get(dir) ?? []).length > 0) {\n            return true;\n          }\n\n          if (dir === createOption.startFrom) {\n            return true;\n          }\n\n          return false;\n        });\n\n      if (firstExistDir == null) {\n        throw new Error('Cannot find the parent directory where the export statement is existed');\n      }\n\n      // index.ts \uD30C\uC77C\uC744 \uC0DD\uC131\uD558\uAE30 \uC704\uD55C render data\uB97C \uC0DD\uC131\uD55C\uB2E4\n      // Generate render data to create an `index.ts` file\n      const indexRednerData = createRenderData(\n        CE_AUTO_RENDER_CASE.DEFAULT_NAMED,\n        CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR,\n        createOption,\n        posixJoin(firstExistDir, createOption.exportFilename),\n        {\n          importPath: addCurrentDirPrefix(posixRelative(firstExistDir, params.dirPath)),\n          extname: {\n            origin: '.ts',\n            render: getImportStatementExtname(createOption.fileExt, '.ts'),\n          },\n          isHasDefault: false,\n          isHasPartialExclude: false,\n          default: undefined,\n          named: dirPathMap.get(params.dirPath) ?? [],\n        },\n      );\n\n      const prev = renderDataMap.get(firstExistDir);\n\n      if (prev == null) {\n        renderDataMap.set(firstExistDir, [indexRednerData]);\n      } else {\n        renderDataMap.set(firstExistDir, [...prev, indexRednerData]);\n      }\n    } else {\n      const currentDirStatements = dirPathMap.get(params.dirPath) ?? [];\n\n      // index.ts \uD30C\uC77C\uC744 \uC0DD\uC131\uD558\uAE30 \uC704\uD55C render data\uB97C \uC0DD\uC131\uD55C\uB2E4\n      const indexRednerData = createRenderData(\n        CE_AUTO_RENDER_CASE.DEFAULT_NAMED,\n        CE_GENERATION_STYLE.DEFAULT_STAR_NAMED_STAR,\n        createOption,\n        posixJoin(params.dirPath, createOption.exportFilename),\n        {\n          importPath: addCurrentDirPrefix(posixRelative(parentDir, params.dirPath)),\n          extname: {\n            origin: '.ts',\n            render: getImportStatementExtname(createOption.fileExt, '.ts'),\n          },\n          isHasDefault: false,\n          isHasPartialExclude: false,\n          default: undefined,\n          named: currentDirStatements,\n        },\n      );\n\n      const prev = renderDataMap.get(parentDir);\n\n      if (prev == null) {\n        renderDataMap.set(parentDir, [indexRednerData]);\n      } else {\n        renderDataMap.set(parentDir, [...prev, indexRednerData]);\n      }\n    }\n  });\n\n  const rendereds = await Promise.all(\n    Array.from(renderDataMap.entries()).map(async ([dirPath, datas]) => {\n      const indexFilePath = posixJoin(dirPath, createOption.exportFilename);\n      const rendered = await Promise.all(\n        datas.map(async (data) => {\n          const evaluated = await TemplateContainer.evaluate(data.style, data.renderData);\n          return evaluated;\n        }),\n      );\n\n      return {\n        filePath: indexFilePath,\n        rendered: rendered.filter((line) => line != null && line !== ''),\n      };\n    }),\n  );\n\n  ProgressBar.it.stop();\n  Spinner.it.start('output file exists check, ...');\n\n  const outputMap: Map<string, string> = new Map<string, string>(\n    rendereds.map((render) => {\n      return [render.filePath, render.rendered.join('\\n')];\n    }),\n  );\n\n  const fileExistReason = await checkOutputFile(outputMap);\n\n  if (!createOption.overwrite && !createOption.backup && fileExistReason.length > 0) {\n    Spinner.it.fail(\"ctix 'create' mode incomplete ...\");\n    Reasoner.it.start([...fileExistReason, ...statementTable.getDuplicateReason()]);\n    return;\n  }\n\n  const indexFiles = await Promise.all(\n    Array.from(outputMap.entries())\n      .map(([filePath, fileContent]) => ({ filePath, fileContent }))\n      .map(async (file) => {\n        return {\n          path: file.filePath,\n          content: await TemplateContainer.evaluate(CE_TEMPLATE_NAME.INDEX_FILE_TEMPLATE, {\n            directive: createOption.directive,\n            banner: getBanner(createOption, dayjs()),\n            eol: extendOptions.eol,\n            content: file.fileContent,\n          } satisfies IIndexFileWriteParams),\n        };\n      }),\n  );\n\n  await indexWrites(indexFiles, createOption, extendOptions);\n\n  ProjectContainer.addSourceFilesAtPaths(createOption.project, Array.from(outputMap.keys()));\n\n  Reasoner.it.start(statementTable.getDuplicateReason());\n  Spinner.it.succeed(\"ctix 'create' mode complete!\");\n}\n", "import type { IExportStatement } from '#/compilers/interfaces/IExportStatement';\nimport type { IModeBundleOptions } from '#/configs/interfaces/IModeBundleOptions';\nimport type { IModeGenerateOptions } from '#/configs/interfaces/IModeGenerateOptions';\nimport { addCurrentDirPrefix } from '#/modules/path/addCurrentDirPrefix';\nimport { getExtname } from '#/modules/path/getExtname';\nimport { getRelativeDepth } from '#/modules/path/getRelativeDepth';\nimport { posixRelative } from '#/modules/path/modules/posixRelative';\nimport type { IIndexRenderData } from '#/templates/interfaces/IIndexRenderData';\nimport { getDirname } from 'my-node-fp';\nimport path from 'node:path';\n\nexport async function getModuleRenderData(\n  option: Pick<IModeGenerateOptions & IModeBundleOptions, 'project' | 'quote' | 'useSemicolon'>,\n  filePath: string,\n  output: string,\n): Promise<IIndexRenderData | undefined> {\n  const extname = getExtname(filePath);\n  const renderExtname = extname;\n  const filename = path.basename(filePath).replace(new RegExp(`${extname}$`), '');\n  const dirPath = await getDirname(filePath);\n  const relativePath = addCurrentDirPrefix(\n    posixRelative(await getDirname(output), await getDirname(filePath)),\n  );\n\n  const defaultExport: IExportStatement = {\n    path: {\n      filename,\n      dirPath,\n      relativePath,\n    },\n    pos: {\n      line: 1,\n      column: 1,\n    },\n    depth: getRelativeDepth(option.project, dirPath),\n    isDefault: true,\n    identifier: {\n      name: filename,\n      alias: filename,\n    },\n    isPureType: false,\n    isAnonymous: false,\n    isExcluded: false,\n    comments: [],\n  };\n\n  return {\n    options: {\n      quote: option.quote,\n      useSemicolon: option.useSemicolon,\n    },\n    filePath,\n    statement: {\n      extname: {\n        origin: extname,\n        render: renderExtname,\n      },\n      importPath: relativePath,\n      isHasDefault: true,\n      isHasPartialExclude: false,\n      default: defaultExport,\n      named: [],\n    },\n  } satisfies IIndexRenderData;\n}\n", "import { ProgressBar } from '#/cli/ux/ProgressBar';\nimport { Reasoner } from '#/cli/ux/Reasoner';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport { CE_INLINE_COMMENT_KEYWORD } from '#/comments/const-enum/CE_INLINE_COMMENT_KEYWORD';\nimport { getInlineCommentedFiles } from '#/comments/getInlineCommentedFiles';\nimport { getExtendOptions } from '#/configs/getExtendOptions';\nimport type { TCommandBuildOptions } from '#/configs/interfaces/TCommandBuildOptions';\nimport type { TModuleOptions } from '#/configs/interfaces/TModuleOptions';\nimport { ProjectContainer } from '#/modules/file/ProjectContainer';\nimport { checkOutputFile } from '#/modules/file/checkOutputFile';\nimport { getTsExcludeFiles } from '#/modules/file/getTsExcludeFiles';\nimport { getTsIncludeFiles } from '#/modules/file/getTsIncludeFiles';\nimport { posixJoin } from '#/modules/path/modules/posixJoin';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { ExcludeContainer } from '#/modules/scope/ExcludeContainer';\nimport { IncludeContainer } from '#/modules/scope/IncludeContainer';\nimport { getBanner } from '#/modules/writes/getBanner';\nimport { indexWrites } from '#/modules/writes/indexWrites';\nimport { CE_TEMPLATE_NAME } from '#/templates/const-enum/CE_TEMPLATE_NAME';\nimport type { IIndexFileWriteParams } from '#/templates/interfaces/IIndexFileWriteParams';\nimport type { IIndexRenderData } from '#/templates/interfaces/IIndexRenderData';\nimport { TemplateContainer } from '#/templates/modules/TemplateContainer';\nimport { getModuleRenderData } from '#/templates/modules/getModuleRenderData';\nimport dayjs from 'dayjs';\n\nexport async function moduling(_buildOptions: TCommandBuildOptions, moduleOption: TModuleOptions) {\n  Spinner.it.start(\"ctix 'module' mode start, ...\");\n\n  await TemplateContainer.bootstrap();\n\n  const extendOptions = await getExtendOptions(moduleOption.project);\n  const project = ProjectContainer.project(moduleOption.project);\n\n  Spinner.it.succeed(`[${moduleOption.project}] loading compelete!`);\n  Spinner.it.update('include, exclude config');\n\n  const output = posixResolve(posixJoin(moduleOption.output, moduleOption.exportFilename));\n\n  const include = new IncludeContainer({\n    config: { include: getTsIncludeFiles({ config: moduleOption, extend: extendOptions }) },\n    cwd: extendOptions.resolved.projectDirPath,\n  });\n\n  const inlineExcludeds = getInlineCommentedFiles({\n    project,\n    filePaths: extendOptions.tsconfig.fileNames,\n    keyword: CE_INLINE_COMMENT_KEYWORD.FILE_EXCLUDE_KEYWORD,\n  });\n\n  /**\n   * SourceCode\uB97C \uC77D\uC5B4\uC11C inline file exclude \uB41C \uD30C\uC77C\uC744 \uBCC4\uB3C4\uB85C \uC804\uB2EC\uD55C\uB2E4. \uC774\uB807\uAC8C \uD558\uB294 \uC774\uC720\uB294, \uC774 \uD30C\uC77C\uC740 \uC65C \uD3EC\uD568\uB418\uC9C0\n   * \uC54A\uC558\uC9C0? \uB77C\uB294 \uB4F1\uC758 \uB9AC\uD3EC\uD2B8\uB97C \uC0DD\uC131\uD560 \uB54C \uD55C \uACF3\uC5D0\uC11C \uC774 \uC815\uBCF4\uB97C \uB2E4 \uAD00\uB9AC\uD574\uC57C \uB9AC\uD3EC\uD2B8\uB97C \uC0DD\uC131\uD574\uC11C \uBCF4\uC5EC\uC904 \uC218 \uC788\uAE30 \uB54C\uBB38\uC774\uB2E4\n   */\n  const exclude = new ExcludeContainer({\n    config: {\n      exclude: [...getTsExcludeFiles({ config: moduleOption, extend: extendOptions }), ...[output]],\n    },\n    inlineExcludeds,\n    cwd: extendOptions.resolved.projectDirPath,\n  });\n\n  const filenames = include.files().filter((filename) => !exclude.isExclude(filename));\n\n  Spinner.it.succeed('analysis export statements completed!');\n  Spinner.it.stop();\n\n  if (filenames.length <= 0) {\n    Spinner.it.fail(\n      'Cannot find target files. Please add --include option or add include section in .ctirc file',\n    );\n    Spinner.it.stop();\n    return;\n  }\n\n  ProgressBar.it.head = '    file ';\n  ProgressBar.it.start(filenames.length, 0);\n\n  const datas = (\n    await Promise.all(\n      filenames.map(async (filename) => {\n        const renderData = await getModuleRenderData(moduleOption, filename, moduleOption.output);\n\n        ProgressBar.it.increment();\n\n        return renderData;\n      }),\n    )\n  ).filter((data): data is IIndexRenderData => data != null);\n\n  const rendered = await TemplateContainer.evaluate(CE_TEMPLATE_NAME.MODULE_INDEX_FILE_TEMPLATE, {\n    datas,\n    options: moduleOption,\n  });\n\n  ProgressBar.it.stop();\n  Spinner.it.start('output file exists check, ...');\n\n  const outputMap = new Map<string, string>();\n  outputMap.set(output, rendered);\n  const fileExistReason = await checkOutputFile(outputMap);\n\n  if (!moduleOption.overwrite && !moduleOption.backup && fileExistReason.length > 0) {\n    Spinner.it.fail(\"ctix 'bundle' mode incomplete ...\");\n    Reasoner.it.start(fileExistReason);\n    return;\n  }\n\n  const indexFiles = await Promise.all(\n    Array.from(outputMap.entries())\n      .map(([filePath, fileContent]) => ({ filePath, fileContent }))\n      .map(async (file) => {\n        return {\n          path: file.filePath,\n          content: await TemplateContainer.evaluate(CE_TEMPLATE_NAME.INDEX_FILE_TEMPLATE, {\n            directive: moduleOption.directive,\n            banner: getBanner(moduleOption, dayjs()),\n            eol: extendOptions.eol,\n            content: file.fileContent,\n          } satisfies IIndexFileWriteParams),\n        };\n      }),\n  );\n\n  await indexWrites(indexFiles, moduleOption, extendOptions);\n\n  // index \uD30C\uC77C\uC744 \uC4F0\uACE0 \uB098\uBA74 \uC774\uAC78 project\uC5D0 \uB4F1\uB85D\uD574\uC918\uC57C \uD55C\uB2E4\n  ProjectContainer.addSourceFilesAtPaths(moduleOption.project, Array.from(outputMap.keys()));\n\n  Spinner.it.succeed(`${output} file build completed!`);\n  Spinner.it.succeed(\"ctix 'bundle' mode completed!\");\n}\n", "import { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport type { TCommandBuildOptions } from '#/configs/interfaces/TCommandBuildOptions';\nimport { bundling } from '#/modules/commands/bundling';\nimport { creating } from '#/modules/commands/creating';\nimport { moduling } from '#/modules/commands/moduling';\n\nexport async function building(options: TCommandBuildOptions) {\n  await options.options.reduce(async (prevHandle, modeOption) => {\n    const handle = () => {\n      switch (modeOption.mode) {\n        case CE_CTIX_BUILD_MODE.MODULE_MODE:\n          return moduling(options, modeOption);\n        case CE_CTIX_BUILD_MODE.CREATE_MODE:\n          return creating(options, modeOption);\n        default:\n          return bundling(options, modeOption);\n      }\n    };\n\n    await prevHandle;\n    return handle();\n  }, Promise.resolve());\n}\n", "import { ProgressBar } from '#/cli/ux/ProgressBar';\nimport { Reasoner } from '#/cli/ux/Reasoner';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport { createBuildOptions } from '#/configs/transforms/createBuildOptions';\nimport { building } from '#/modules/commands/building';\nimport consola from 'consola';\nimport type yargs from 'yargs';\n\nasync function buildCommandCode(argv: yargs.ArgumentsCamelCase<TCommandBuildArgvOptions>) {\n  const options = await createBuildOptions(argv);\n  await building(options);\n}\n\nexport async function buildCommand(argv: yargs.ArgumentsCamelCase<TCommandBuildArgvOptions>) {\n  ProgressBar.it.enable = true;\n  Spinner.it.enable = true;\n  Reasoner.it.enable = true;\n\n  try {\n    await buildCommandCode(argv);\n  } catch (err) {\n    consola.error(err);\n  } finally {\n    ProgressBar.it.stop();\n    Spinner.it.stop();\n  }\n}\n", "import { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport { getRelativeDepth } from '#/modules/path/getRelativeDepth';\nimport path from 'node:path';\n\nexport function getTsconfigComparer(cwd: string) {\n  const comparer = (left: string, right: string): number => {\n    const leftDepth = getRelativeDepth(cwd, left);\n    const rightDepth = getRelativeDepth(cwd, right);\n\n    const depthDiff = leftDepth - rightDepth;\n\n    if (depthDiff !== 0) {\n      return depthDiff;\n    }\n\n    const leftBasename = path.basename(left);\n    const rightBasename = path.basename(right);\n\n    if (leftBasename === CE_CTIX_DEFAULT_VALUE.TSCONFIG_FILENAME) {\n      return -1;\n    }\n\n    if (rightBasename === CE_CTIX_DEFAULT_VALUE.TSCONFIG_FILENAME) {\n      return 1;\n    }\n\n    return left.localeCompare(right);\n  };\n\n  return comparer;\n}\n", "import type { IInitQuestionAnswer } from '#/cli/interfaces/IInitQuestionAnswer';\nimport { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport { getTsconfigComparer } from '#/configs/modules/getTsconfigComparer';\nimport { getGlobFiles } from '#/modules/file/getGlobFiles';\nimport { defaultExclude } from '#/modules/scope/defaultExclude';\nimport chalk from 'chalk';\nimport { exists } from 'find-up';\nimport { Glob } from 'glob';\nimport inquirer from 'inquirer';\nimport pathe from 'pathe';\n\nexport async function askInitOptions(): Promise<IInitQuestionAnswer> {\n  const cwd = process.cwd();\n\n  const cwdAnswer = await inquirer.prompt<Pick<IInitQuestionAnswer, 'cwd'>>([\n    {\n      type: 'input',\n      name: 'cwd',\n      default: cwd,\n      message: 'Enter the working directory',\n    },\n  ]);\n\n  const optionFilePath = pathe.join(cwdAnswer.cwd, CE_CTIX_DEFAULT_VALUE.CONFIG_FILENAME);\n  const optionFileExist = await exists(optionFilePath);\n  const tsconfigGlob = new Glob(['**/tsconfig.json', '**/tsconfig.*.json'], {\n    cwd: cwdAnswer.cwd,\n    ignore: defaultExclude,\n  });\n  const tsconfigFiles = getGlobFiles(tsconfigGlob);\n  const packageJsonGlob = new Glob(['**/package.json'], {\n    cwd: cwdAnswer.cwd,\n    ignore: defaultExclude,\n  });\n  const packageJsonFiles = getGlobFiles(packageJsonGlob);\n  const sortedTsconfigFiles = tsconfigFiles.sort(getTsconfigComparer(cwdAnswer.cwd));\n  const sortedPackageJsonFiles = packageJsonFiles.sort(getTsconfigComparer(cwdAnswer.cwd));\n\n  const userSelectedAnswer = await inquirer.prompt<Omit<IInitQuestionAnswer, 'cwd' | 'overwrite'>>([\n    {\n      type: 'checkbox',\n      name: 'tsconfig',\n      message: 'Select your tsconfig files',\n      default: sortedTsconfigFiles,\n      choices: sortedTsconfigFiles,\n    },\n    {\n      type: 'list',\n      name: 'mode',\n      message: 'Select index.ts file build mode',\n      default: CE_CTIX_BUILD_MODE.BUNDLE_MODE,\n      choices: [CE_CTIX_BUILD_MODE.BUNDLE_MODE, CE_CTIX_BUILD_MODE.CREATE_MODE],\n    },\n    {\n      type: 'confirm',\n      name: 'addEveryOptions',\n      message: 'Do you want to include all available options in the configuration file?',\n      default: false,\n    },\n    {\n      type: 'list',\n      name: 'configPosition',\n      message: 'Where do you want to add the configuration?',\n      default: '.ctirc',\n      choices: ['.ctirc', 'tsconfig.json', 'package.json'],\n    },\n    {\n      type: 'list',\n      name: 'packageJson',\n      message: 'Select your package.json files',\n      default: sortedPackageJsonFiles,\n      choices: sortedPackageJsonFiles,\n      when: (answer) => {\n        return answer.configPosition === 'package.json';\n      },\n    },\n    {\n      type: 'confirm',\n      name: 'configComment',\n      message: 'Do you want to add a comment to the configuration?',\n      default: true,\n      when: (answer) => {\n        return answer.configPosition !== 'package.json';\n      },\n    },\n    {\n      type: 'confirm',\n      name: 'confirmBackupPackageTsconfig',\n      message: (answer) => `Do you want to create a backup file from ${answer.configPosition}?`,\n      default: true,\n      when: (answer) => {\n        return answer.configPosition === 'tsconfig.json';\n      },\n    },\n    {\n      type: 'input',\n      name: 'exportFilename',\n      default: CE_CTIX_DEFAULT_VALUE.EXPORT_FILENAME,\n      message: 'Enter the bundle file name',\n    },\n  ]);\n\n  if (userSelectedAnswer.configPosition === '.ctirc' && optionFileExist) {\n    const overwriteAnswer = await inquirer.prompt<Pick<IInitQuestionAnswer, 'overwirte'>>([\n      {\n        type: 'confirm',\n        name: 'overwirte',\n        message: `Already exists ${chalk.redBright(optionFilePath)}, overwrite it?`,\n        default: false,\n      },\n    ]);\n\n    if (!overwriteAnswer.overwirte) {\n      return {\n        cwd: cwdAnswer.cwd,\n        overwirte: overwriteAnswer.overwirte,\n        tsconfig: [],\n        addEveryOptions: false,\n        packageJson: pathe.join(process.cwd(), CE_CTIX_DEFAULT_VALUE.PACKAGE_JSON_FILENAME),\n        mode: CE_CTIX_BUILD_MODE.BUNDLE_MODE,\n        configPosition: '.ctirc',\n        configComment: true,\n        confirmBackupPackageTsconfig: true,\n        exportFilename: CE_CTIX_DEFAULT_VALUE.EXPORT_FILENAME,\n      } satisfies IInitQuestionAnswer;\n    }\n  }\n\n  const answer: IInitQuestionAnswer = {\n    ...cwdAnswer,\n    ...userSelectedAnswer,\n    overwirte: true,\n  };\n\n  return answer;\n}\n", "import type { IInitQuestionAnswer } from '#/cli/interfaces/IInitQuestionAnswer';\nimport { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport { getTsconfigComparer } from '#/configs/modules/getTsconfigComparer';\nimport { getGlobFiles } from '#/modules/file/getGlobFiles';\nimport { defaultExclude } from '#/modules/scope/defaultExclude';\nimport { Glob } from 'glob';\nimport pathe from 'pathe';\n\nexport async function getDefaultInitAnswer(): Promise<IInitQuestionAnswer> {\n  const cwd = process.cwd();\n  const glob = new Glob(['**/tsconfig.json', '**/tsconfig.*.json'], {\n    cwd,\n    ignore: defaultExclude,\n  });\n  const tsconfigFiles = getGlobFiles(glob);\n  const sortedTsconfigFiles = tsconfigFiles.sort(getTsconfigComparer(cwd));\n  const tsconfigPath = sortedTsconfigFiles.at(0);\n\n  if (tsconfigPath == null) {\n    throw new Error('tsconfig.json file was searched for but not found');\n  }\n\n  const answer: IInitQuestionAnswer = {\n    cwd,\n    tsconfig: [tsconfigPath],\n    packageJson: pathe.join(process.cwd(), CE_CTIX_DEFAULT_VALUE.PACKAGE_JSON_FILENAME),\n    mode: CE_CTIX_BUILD_MODE.BUNDLE_MODE,\n    exportFilename: CE_CTIX_DEFAULT_VALUE.EXPORT_FILENAME,\n    addEveryOptions: false,\n    configComment: true,\n    configPosition: '.ctirc',\n    confirmBackupPackageTsconfig: true,\n    overwirte: true,\n  };\n\n  return answer;\n}\n", "import type { IInitQuestionAnswer } from '#/cli/interfaces/IInitQuestionAnswer';\n\nexport function isConfigComment(\n  answer: Pick<IInitQuestionAnswer, 'configComment' | 'configPosition'>,\n) {\n  if (answer.configPosition === 'package.json') {\n    return false;\n  }\n\n  return answer.configComment;\n}\n", "import { askInitOptions } from '#/cli/questions/askInitOptions';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport { getFileScope } from '#/compilers/getFileScope';\nimport { getTypeScriptConfig } from '#/compilers/getTypeScriptConfig';\nimport { CE_CTIX_BUILD_MODE } from '#/configs/const-enum/CE_CTIX_BUILD_MODE';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport type { TCommandInitOptions } from '#/configs/interfaces/TCommandInitOptions';\nimport { getDefaultInitAnswer } from '#/configs/modules/getDefaultInitAnswer';\nimport { transformBundleMode } from '#/configs/transforms/transformBundleMode';\nimport { transformCreateMode } from '#/configs/transforms/transformCreateMode';\nimport { isConfigComment } from '#/modules/values/isConfigComment';\nimport { CE_TEMPLATE_NAME } from '#/templates/const-enum/CE_TEMPLATE_NAME';\nimport { TemplateContainer } from '#/templates/modules/TemplateContainer';\nimport chalk from 'chalk';\nimport { assign, parse, stringify } from 'comment-json';\nimport fs from 'node:fs';\nimport pathe from 'pathe';\n\nexport async function initializing(option: TCommandInitOptions) {\n  await TemplateContainer.bootstrap();\n\n  const answer = option.forceYes ? await getDefaultInitAnswer() : await askInitOptions();\n\n  if (!answer.overwirte) {\n    const optionFilePath = pathe.join(answer.cwd, CE_CTIX_DEFAULT_VALUE.CONFIG_FILENAME);\n    Spinner.it.fail(`${chalk.yellow(optionFilePath)} already exists`);\n    return;\n  }\n\n  Spinner.it.start(`Start ctix ${chalk.yellow('configuration')} generate ...`);\n\n  const nestedOptions = await Promise.all(\n    answer.tsconfig.map(async (tsconfigPath) => {\n      Spinner.it.update(`Start option creation for: ${chalk.yellow(tsconfigPath)}`);\n\n      const tsconfig = getTypeScriptConfig(tsconfigPath);\n      const { include, exclude } = getFileScope(tsconfig.raw);\n\n      const initOption =\n        answer.mode === CE_CTIX_BUILD_MODE.CREATE_MODE\n          ? await transformCreateMode(\n              { project: tsconfigPath, exportFilename: answer.exportFilename },\n              { include, exclude },\n            )\n          : transformBundleMode(\n              { project: tsconfigPath, exportFilename: answer.exportFilename },\n              { include, exclude },\n            );\n\n      Spinner.it.succeed(`${chalk.yellow(tsconfigPath)} option creation completed!`);\n\n      return {\n        ...initOption,\n        include: JSON.stringify(initOption.include),\n        exclude: JSON.stringify(initOption.exclude),\n        removeBackup: false,\n        forceYes: false,\n        mode: answer.mode,\n      };\n    }),\n  );\n\n  Spinner.it.start(`Start ${chalk.yellow('.ctirc')} file write ...`);\n\n  const renderedNestedOptions = await Promise.all(\n    nestedOptions.map(async (initOption) => {\n      const rendered = await TemplateContainer.evaluate(\n        CE_TEMPLATE_NAME.NESTED_OPTIONS_TEMPLATE,\n        {\n          isComment: isConfigComment(answer),\n          addEveryOptions: answer.addEveryOptions,\n          options: initOption,\n        },\n        {\n          rmWhitespace: false,\n        },\n      );\n\n      return rendered;\n    }),\n  );\n\n  const renderedOptions = await TemplateContainer.evaluate(\n    CE_TEMPLATE_NAME.OPTIONS_TEMPLATE,\n    {\n      config: CE_CTIX_DEFAULT_VALUE.CONFIG_FILENAME,\n      isComment: isConfigComment(answer),\n      addEveryOptions: answer.addEveryOptions,\n      spinnerStream: 'stdout',\n      progressStream: 'stdout',\n      reasonerStream: 'stderr',\n      options: renderedNestedOptions.join(',\\n'),\n    },\n    { rmWhitespace: false },\n  );\n\n  const parsedRenderedOptions = parse(renderedOptions);\n\n  if (answer.configPosition === 'tsconfig.json') {\n    // tsconfig.json \uD30C\uC77C\uC740 \uC911\uC694\uD558\uB2C8\uAE4C, \uBC31\uC5C5 \uB9CC\uB4E4 \uC0DD\uAC01\uC774 \uC788\uB0D0\uACE0 \uBB3C\uC5B4\uBCF4\uC790\n    await Promise.all(\n      answer.tsconfig.map(async (tsconfigFilePath) => {\n        const resolvedTsconfigFilePath = pathe.resolve(tsconfigFilePath);\n        const buf = await fs.promises.readFile(resolvedTsconfigFilePath);\n        const parsedTsconfig = parse(buf.toString());\n        const newTsconfig = assign(parsedTsconfig, { ctix: parsedRenderedOptions });\n\n        if (answer.confirmBackupPackageTsconfig) {\n          const backupFilePath = `${pathe.basename(resolvedTsconfigFilePath)}.bak${pathe.extname(resolvedTsconfigFilePath)}`;\n          await fs.promises.writeFile(backupFilePath, buf.toString());\n        }\n\n        await fs.promises.writeFile(resolvedTsconfigFilePath, stringify(newTsconfig, undefined, 2));\n        Spinner.it.succeed(`${chalk.yellow(resolvedTsconfigFilePath)} file modifing completed!`);\n      }),\n    );\n  } else if (answer.configPosition === 'package.json') {\n    const packageJsonFilePath = pathe.resolve(answer.packageJson);\n    const buf = await fs.promises.readFile(packageJsonFilePath);\n    const parsedPackageJson = parse(buf.toString());\n    const newPackageJson = assign(parsedPackageJson, { ctix: parsedRenderedOptions });\n\n    if (answer.confirmBackupPackageTsconfig) {\n      const backupFilePath = `${pathe.basename(packageJsonFilePath)}.bak${pathe.extname(packageJsonFilePath)}`;\n      await fs.promises.writeFile(backupFilePath, buf.toString());\n    }\n\n    await fs.promises.writeFile(packageJsonFilePath, stringify(newPackageJson, undefined, 2));\n    Spinner.it.succeed(`${chalk.yellow(packageJsonFilePath)} file modifing completed!`);\n  } else {\n    await fs.promises.writeFile('.ctirc', stringify(parsedRenderedOptions, undefined, 2));\n    Spinner.it.succeed(`${chalk.yellow('.ctirc')} file writing completed!`);\n  }\n}\n", "import { ProgressBar } from '#/cli/ux/ProgressBar';\nimport { Reasoner } from '#/cli/ux/Reasoner';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport { CE_CTIX_COMMAND } from '#/configs/const-enum/CE_CTIX_COMMAND';\nimport type { ICommandInitOptions } from '#/configs/interfaces/ICommandInitOptions';\nimport type { TCommandInitOptions } from '#/configs/interfaces/TCommandInitOptions';\nimport { initializing } from '#/modules/commands/initializing';\nimport consola from 'consola';\nimport type yargs from 'yargs';\n\nasync function initCommandCode(argv: yargs.ArgumentsCamelCase<ICommandInitOptions>) {\n  const option: TCommandInitOptions = {\n    $kind: CE_CTIX_COMMAND.INIT_COMMAND,\n    forceYes: argv.forceYes,\n  };\n\n  await initializing(option);\n}\n\nexport async function initCommand(argv: yargs.ArgumentsCamelCase<ICommandInitOptions>) {\n  ProgressBar.it.enable = true;\n  Spinner.it.enable = true;\n  Reasoner.it.enable = true;\n\n  try {\n    await initCommandCode(argv);\n  } catch (err) {\n    consola.error(err);\n  } finally {\n    ProgressBar.it.stop();\n    Spinner.it.stop();\n  }\n}\n", "import { CE_CTIX_COMMAND } from '#/configs/const-enum/CE_CTIX_COMMAND';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCommandRemoveOptions } from '#/configs/interfaces/TCommandRemoveOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport type { ArgumentsCamelCase } from 'yargs';\n\nexport function createRemoveOptions(\n  argv: ArgumentsCamelCase<TCommandRemoveOptions & TCommandBuildArgvOptions> & {\n    options?: (TCreateOptions | TBundleOptions)[];\n  },\n): TCommandRemoveOptions {\n  const options: TCommandRemoveOptions = {\n    $kind: CE_CTIX_COMMAND.REMOVE_COMMAND,\n    config: argv.config,\n    spinnerStream: argv.spinnerStream,\n    progressStream: argv.progressStream,\n    reasonerStream: argv.reasonerStream,\n    removeBackup: argv.removeBackup,\n    exportFilename: argv.exportFilename ?? CE_CTIX_DEFAULT_VALUE.EXPORT_FILENAME,\n    forceYes: argv.forceYes,\n  };\n\n  return options;\n}\n", "import { bignumber } from 'mathjs';\n\nexport function getRatioNumber(num: number, base: 1 | 100 = 1) {\n  return bignumber(1)\n    .sub(bignumber(num))\n    .mul(100 * base)\n    .floor()\n    .div(100)\n    .toNumber();\n}\n", "import type { IChoiceTypeItem } from '#/cli/interfaces/IChoiceTypeItem';\nimport { getRatioNumber } from '#/cli/modules/getRatioNumber';\nimport { CE_CTIX_DEFAULT_VALUE } from '#/configs/const-enum/CE_CTIX_DEFAULT_VALUE';\nimport { posixRelative } from '#/modules/path/modules/posixRelative';\nimport Fuse from 'fuse.js';\nimport inquirer from 'inquirer';\nimport { CheckboxPlusPrompt } from 'inquirer-ts-checkbox-plus-prompt';\n\nexport async function askRemoveFiles(filePaths: string[]) {\n  inquirer.registerPrompt('checkbox-plus', CheckboxPlusPrompt);\n\n  const choiceAbleTypes = filePaths.map((filePath) => {\n    return {\n      filePath,\n      name: posixRelative(process.cwd(), filePath),\n      value: filePath,\n    } satisfies IChoiceTypeItem;\n  });\n\n  const fuse = new Fuse(choiceAbleTypes, {\n    includeScore: true,\n    keys: ['identifier', 'filePath'],\n  });\n\n  const answer = await inquirer.prompt<{ indexFiles: string[] }>([\n    {\n      type: 'checkbox-plus',\n      name: 'indexFiles',\n      pageSize: 20,\n      highlight: true,\n      searchable: true,\n      message: 'Select `index.ts` for delete from project: ',\n      default: choiceAbleTypes.map((item) => item.value),\n      validate(removeIndexFiles: string[]) {\n        if (removeIndexFiles.length === 0) {\n          return 'You must choose at least one type in `index.ts` files.';\n        }\n\n        return true;\n      },\n      source: (_answersSoFar: unknown, input?: string) => {\n        const safeInput = input == null ? '' : input;\n\n        if (safeInput === '') {\n          return Promise.resolve(choiceAbleTypes);\n        }\n\n        return Promise.resolve(\n          fuse\n            .search(safeInput)\n            .map((matched) => {\n              return {\n                ...matched,\n                oneBased: getRatioNumber(matched.score ?? 0),\n                percent: getRatioNumber(matched.score ?? 0, 100),\n              };\n            })\n            .filter((matched) => matched.percent >= CE_CTIX_DEFAULT_VALUE.REMOVE_FILE_CHOICE_FUZZY)\n            .sort((l, r) => r.percent - l.percent)\n            .map((matched) => matched.item),\n        );\n      },\n    },\n  ]);\n\n  return answer.indexFiles;\n}\n", "import type { TBundleOptions } from '#/configs/interfaces/TBundleOptions';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCommandRemoveOptions } from '#/configs/interfaces/TCommandRemoveOptions';\nimport type { TCreateOptions } from '#/configs/interfaces/TCreateOptions';\nimport { posixJoin } from '#/modules/path/modules/posixJoin';\nimport { posixResolve } from '#/modules/path/modules/posixResolve';\nimport { getDirname } from 'my-node-fp';\nimport type yargs from 'yargs';\n\ninterface IGetRemoveFileGlobPatternReturn {\n  origin: string;\n  project: string;\n  pattern: string;\n}\n\nexport async function getRemoveFileGlobPattern(\n  argv: Pick<\n    yargs.ArgumentsCamelCase<TCommandRemoveOptions & TCommandBuildArgvOptions>,\n    'exportFilename' | 'removeBackup'\n  >,\n  options: (\n    | Pick<TCreateOptions, 'project' | 'exportFilename'>\n    | Pick<TBundleOptions, 'project' | 'exportFilename'>\n  )[],\n): Promise<IGetRemoveFileGlobPatternReturn[]> {\n  const dirs = (\n    await Promise.all(\n      options.map(async (modeOption) => {\n        const dir = await getDirname(modeOption.project);\n\n        const results: IGetRemoveFileGlobPatternReturn[] = [\n          {\n            origin: dir,\n            project: modeOption.project,\n            pattern: posixJoin(\n              posixResolve(dir),\n              '**',\n              argv.exportFilename ?? modeOption.exportFilename,\n            ),\n          },\n        ];\n\n        if (argv.removeBackup) {\n          results.push({\n            origin: dir,\n            project: modeOption.project,\n            pattern: posixJoin(\n              posixResolve(dir),\n              '**',\n              argv.exportFilename != null\n                ? `${argv.exportFilename}.bak`\n                : `${modeOption.exportFilename}.bak`,\n            ),\n          });\n        }\n\n        return results;\n      }),\n    )\n  ).flat();\n\n  return dirs;\n}\n", "import { exists } from 'my-node-fp';\nimport { unlink } from 'node:fs/promises';\nimport { isPromise } from 'node:util/types';\n\nexport async function unlinks(\n  filePaths: string[],\n  callback?: (filePath: string) => void | Promise<void>,\n) {\n  await Promise.all(\n    filePaths.map(async (filePath) => {\n      if (await exists(filePath)) {\n        await unlink(filePath);\n\n        if (callback != null) {\n          const callbacked = callback(filePath);\n\n          if (isPromise(callbacked)) {\n            await callbacked;\n          }\n        }\n      }\n    }),\n  );\n}\n", "import { askRemoveFiles } from '#/cli/questions/askRemoveFiles';\nimport { ProgressBar } from '#/cli/ux/ProgressBar';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport type { TCommandBuildOptions } from '#/configs/interfaces/TCommandBuildOptions';\nimport type { TCommandRemoveOptions } from '#/configs/interfaces/TCommandRemoveOptions';\nimport { getRemoveFileGlobPattern } from '#/modules/file/getRemoveFileGlobPattern';\nimport { unlinks } from '#/modules/file/unlinks';\nimport { posixRelative } from '#/modules/path/modules/posixRelative';\nimport { IncludeContainer } from '#/modules/scope/IncludeContainer';\nimport chalk from 'chalk';\n\nexport async function removing(\n  options: TCommandRemoveOptions & Omit<TCommandBuildOptions, '$kind'>,\n) {\n  Spinner.it.start(`'index.ts' file remove start`);\n\n  const patterns = await getRemoveFileGlobPattern(options, options.options);\n\n  const include = new IncludeContainer({\n    config: { include: patterns.map((projectDir) => projectDir.pattern) },\n    cwd: process.cwd(),\n  });\n  const filePaths = include.files();\n\n  if (options.forceYes) {\n    Spinner.it.succeed('enable force-yes, file removing without question');\n    Spinner.it.stop();\n\n    ProgressBar.it.start(filePaths.length);\n\n    await unlinks(filePaths, () => {\n      ProgressBar.it.increment();\n    });\n\n    ProgressBar.it.stop();\n\n    await filePaths.reduce(async (prevHandle: Promise<void>, filePath: string) => {\n      const handle = async () => {\n        Spinner.it.succeed(\n          `${chalk.redBright('removed:')} ${posixRelative(process.cwd(), filePath)}`,\n        );\n      };\n\n      await prevHandle;\n      return handle();\n    }, Promise.resolve());\n\n    return;\n  }\n\n  Spinner.it.stop();\n  ProgressBar.it.start(filePaths.length);\n\n  const indexFiles = await askRemoveFiles(filePaths);\n\n  await unlinks(indexFiles, () => {\n    ProgressBar.it.increment();\n  });\n\n  ProgressBar.it.stop();\n\n  await filePaths.reduce(async (prevHandle: Promise<void>, filePath: string) => {\n    const handle = async () => {\n      Spinner.it.succeed(\n        `${chalk.redBright('removed:')} ${posixRelative(process.cwd(), filePath)}`,\n      );\n    };\n\n    await prevHandle;\n    return handle();\n  }, Promise.resolve());\n}\n", "import { ProgressBar } from '#/cli/ux/ProgressBar';\nimport { Reasoner } from '#/cli/ux/Reasoner';\nimport { Spinner } from '#/cli/ux/Spinner';\nimport type { TCommandBuildArgvOptions } from '#/configs/interfaces/TCommandBuildArgvOptions';\nimport type { TCommandRemoveOptions } from '#/configs/interfaces/TCommandRemoveOptions';\nimport { createBuildOptions } from '#/configs/transforms/createBuildOptions';\nimport { createRemoveOptions } from '#/configs/transforms/createRemoveOptions';\nimport { removing } from '#/modules/commands/removing';\nimport consola from 'consola';\nimport type yargs from 'yargs';\n\nasync function removeCommandCode(\n  argv: yargs.ArgumentsCamelCase<TCommandRemoveOptions & TCommandBuildArgvOptions>,\n) {\n  const options = await createBuildOptions(argv);\n  const removeOptions = createRemoveOptions(argv);\n\n  await removing({ ...options, ...removeOptions });\n}\n\nexport async function removeCommand(\n  argv: yargs.ArgumentsCamelCase<TCommandRemoveOptions & TCommandBuildArgvOptions>,\n) {\n  ProgressBar.it.enable = true;\n  Spinner.it.enable = true;\n  Reasoner.it.enable = true;\n\n  try {\n    await removeCommandCode(argv);\n  } catch (err) {\n    consola.error(err);\n  } finally {\n    ProgressBar.it.stop();\n    Spinner.it.stop();\n  }\n}\n", "export function askInitOverwrite() {}\n", "export const CE_INLINE_EXCLUDE_KIND = {\n  FILE_EXCLUDE_KEYWORD: 'file',\n  NEXT_STATEMENT_EXCLUDE_KEYWORD: 'next-statement',\n} as const;\n\nexport type CE_INLINE_EXCLUDE_KIND =\n  (typeof CE_INLINE_EXCLUDE_KIND)[keyof typeof CE_INLINE_EXCLUDE_KIND];\n", "import { populate } from 'my-easy-fp';\n\nexport function endsEol(content: string, eol: string, size?: number): string {\n  if (content.endsWith(eol)) {\n    return content;\n  }\n\n  const multiplier = size ?? 1;\n  const eols = populate(multiplier)\n    .map(() => eol)\n    .join('');\n  return `${content}${eols}`;\n}\n", "import { readJsonc } from '#/configs/modules/json/readJsonc';\nimport fs from 'node:fs';\n\nexport async function readJsonConfig<T = unknown>(jsonConfigFilePath: string) {\n  const buf = await fs.promises.readFile(jsonConfigFilePath);\n  const packageJsonParsed = readJsonc<T>(buf);\n\n  if (packageJsonParsed.type === 'fail') {\n    return undefined;\n  }\n\n  return packageJsonParsed.pass;\n}\n", "import { readJsonc } from '#/configs/modules/json/readJsonc';\n\nexport function safeJsonc<T = unknown>(buf: Buffer | string): T | undefined {\n  try {\n    const json = readJsonc<T>(buf);\n\n    if (json.type === 'pass') {\n      return json.pass;\n    }\n\n    return undefined;\n  } catch {\n    return undefined;\n  }\n}\n"],
  "mappings": "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",
  "names": ["tsm", "tsm", "tsm", "parse", "tsm", "tsm", "path", "basename", "path", "path", "replaceSepToPosix", "path", "getDirname", "replaceSepToPosix", "path", "tsm", "path", "tsm", "tsm", "tsm", "pathe", "pathe", "reason", "_table", "replaceSepToPosix", "path", "settify", "getDirname", "replaceSepToPosix", "atOrUndefined", "pathe", "parse", "parse", "isError", "fail", "pass", "isError", "fail", "pass", "parse", "fs", "isError", "fail", "pass", "fs", "isError", "fail", "pass", "pathe", "fs", "isError", "fail", "pass", "isError", "config", "chalk", "chalk", "chalk", "path", "_it", "_isBootstrap", "_enable", "_stream", "chalk", "_it", "_isBootstrap", "_stream", "_enable", "getDirname", "pathe", "isDescendant", "toArray", "path", "projectPath", "tsconfig", "path", "_it", "_isBootstrap", "path", "exists", "replaceSepToPosix", "path", "replaceSepToPosix", "path", "replaceSepToPosix", "path", "replaceSepToPosix", "path", "Glob", "path", "_globs", "_map", "Glob", "path", "exists", "consola", "isError", "fs", "_it", "_isBootstrap", "fs", "isError", "consola", "rendered", "path", "sep", "replaceSepToPosix", "path", "pathe", "basename", "replaceSepToPosix", "path", "chalk", "dayjs", "startSepRemove", "path", "fs", "replaceSepToPosix", "path", "chalk", "dayjs", "getDirnameSync", "getDirname", "path", "dayjs", "consola", "path", "chalk", "exists", "Glob", "pathe", "answer", "Glob", "pathe", "chalk", "parse", "fs", "pathe", "consola", "inquirer", "getDirname", "exists", "isPromise", "chalk", "consola", "populate", "fs"]
}
